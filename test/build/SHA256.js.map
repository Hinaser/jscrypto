{"version":3,"sources":["webpack://JsCrypto.[name]/webpack/universalModuleDefinition","webpack://JsCrypto.[name]/webpack/bootstrap","webpack://JsCrypto.[name]/(webpack)/buildin/global.js","webpack://JsCrypto.[name]/./src/SHA256.ts","webpack://JsCrypto.[name]/./src/lib/Word32Array.ts","webpack://JsCrypto.[name]/./src/lib/algorithm/BufferedBlockAlgorithm.ts","webpack://JsCrypto.[name]/./src/lib/algorithm/Hasher.ts","webpack://JsCrypto.[name]/./src/lib/encoder/Hex.ts","webpack://JsCrypto.[name]/./src/lib/encoder/Latin1.ts","webpack://JsCrypto.[name]/./src/lib/encoder/Utf8.ts","webpack://JsCrypto.[name]/./src/lib/random.ts"],"names":[],"mappings":"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","file":"SHA256.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SHA256\"] = factory();\n\telse\n\t\troot[\"JsCrypto\"] = root[\"JsCrypto\"] || {}, root[\"JsCrypto\"][\"SHA256\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/SHA256.ts\");\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import {Hasher} from \"./lib/algorithm/Hasher\";\nimport {IWord32Array} from \"./lib/type\";\nimport {Word32Array} from \"./lib/Word32Array\";\n\n// Hash values\nconst H: number[] = [];\n// Round constants\nconst K: number[] = [];\n\nfunction isPrime(n: number){\n  const sqrtN = Math.sqrt(n);\n  for(let factor=2;factor<=sqrtN;factor++){\n    if(!(n % factor)){\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getFractionalBits(n: number) {\n  return ((n - (n | 0)) * 0x100000000) | 0;\n}\n\n(function computeRoundConstants(){\n  let n = 2;\n  let nPrime = 0;\n  while(nPrime < 64){\n    if(isPrime(n)){\n      if(nPrime < 8){\n        H[nPrime] = getFractionalBits(Math.pow(n, 1/2));\n      }\n      K[nPrime] = getFractionalBits(Math.pow(n, 1/3));\n      nPrime++;\n    }\n    n++;\n  }\n})();\n\n// Reusable object\nconst W: number[] = [];\n\nexport default class SHA256 extends Hasher {\n  protected _hash: IWord32Array = new Word32Array(H.slice(0));\n  \n  public constructor(hash?: IWord32Array, blockSize?: number, data?: IWord32Array, nBytes?: number) {\n    super(blockSize, data, nBytes);\n    if(typeof hash !== \"undefined\"){\n      this._hash = hash.clone();\n    }\n  }\n  \n  protected doReset() {\n    this._hash = new Word32Array(H.slice(0));\n  }\n  \n  protected doProcessBlock(words: number[], offset: number) {\n    const _H = this._hash.raw();\n    \n    let a = _H[0];\n    let b = _H[1];\n    let c = _H[2];\n    let d = _H[3];\n    let e = _H[4];\n    let f = _H[5];\n    let g = _H[6];\n    let h = _H[7];\n    \n    for(let i=0;i<64;i++){\n      if(i < 16){\n        W[i] = words[offset + i] | 0;\n      }\n      else{\n        const gamma0x = W[i-15];\n        const gamma0 = ((gamma0x << 25) | (gamma0x >>> 7))\n          ^ ((gamma0x << 14) | (gamma0x >>> 18))\n          ^ (gamma0x >>> 3);\n  \n        const gamma1x = W[i - 2];\n        const gamma1  = ((gamma1x << 15) | (gamma1x >>> 17))\n          ^ ((gamma1x << 13) | (gamma1x >>> 19))\n          ^ (gamma1x >>> 10);\n  \n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n  \n      const ch  = (e & f) ^ (~e & g);\n      const maj = (a & b) ^ (a & c) ^ (b & c);\n  \n      const sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n      const sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n  \n      const t1 = h + sigma1 + ch + K[i] + W[i];\n      const t2 = sigma0 + maj;\n  \n      h = g;\n      g = f;\n      f = e;\n      e = (d + t1) | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = (t1 + t2) | 0;\n    }\n  \n    // Intermediate hash value\n    _H[0] = (_H[0] + a) | 0;\n    _H[1] = (_H[1] + b) | 0;\n    _H[2] = (_H[2] + c) | 0;\n    _H[3] = (_H[3] + d) | 0;\n    _H[4] = (_H[4] + e) | 0;\n    _H[5] = (_H[5] + f) | 0;\n    _H[6] = (_H[6] + g) | 0;\n    _H[7] = (_H[7] + h) | 0;\n  }\n  \n  protected doFinalize(): IWord32Array {\n    const words = this._data.raw();\n    const nBitsTotal = this._nBytes * 8;\n    const nBitsLeft = this._data.length() * 8;\n  \n    // Add padding\n    words[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n    words[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    words[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n    this._data.setSignificantBytes(words.length * 4);\n  \n    // Hash final blocks\n    this.process();\n  \n    // Return final computed hash\n    return this._hash;\n  }\n  \n  public clone() {\n    return new SHA256(this._hash, this._blockSize, this._data, this._nBytes);\n  }\n  \n  public static hash(message: IWord32Array|string){\n    return new SHA256().finalize(message);\n  }\n}\n","import {IEncoder, IWord32Array} from \"./type\";\nimport {Hex} from \"./encoder/Hex\";\nimport {random} from \"./random\";\n\n/**\n * An array of 32bit words\n */\nexport class Word32Array implements IWord32Array {\n  private readonly _words: number[];\n  private _nSignificantBytes: number;\n  \n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} nSignificantBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *   var wordArray = new WordArray();\n   *   var wordArray = new WordArray([0x00010203, 0x04050607]);\n   *   var wordArray = new WordArray([0x00010203, 0x04050607], 6);\n   */\n  public constructor(words?: number[], nSignificantBytes?: number) {\n    this._words = words || [];\n    this._nSignificantBytes = typeof nSignificantBytes === \"number\" ? nSignificantBytes : this._words.length * 4;\n  }\n  \n  /**\n   * Get raw reference of internal words.\n   * Modification of this raw array will affect internal words.\n   */\n  public raw(){\n    return this._words;\n  }\n  \n  /**\n   * Return a copy of an array of 32-bit words.\n   */\n  public slice(){\n    return this._words.slice();\n  }\n  \n  /**\n   * Return significantBytes\n   */\n  public length(){\n    return this._nSignificantBytes;\n  }\n  \n  /**\n   * Set significant bytes\n   * @param {number} n - significant bytes\n   */\n  public setSignificantBytes(n: number){\n    this._nSignificantBytes = n;\n  }\n  \n  /**\n   * Converts this word array to a string.\n   *\n   * @param {IEncoder?} encoder The encoding strategy to use. Default: CryptoJS.enc.Hex\n   * @return {string} The stringified word array.\n   * @example\n   *   var string = wordArray + '';\n   *   var string = wordArray.toString();\n   *   var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n  public toString(encoder?: IEncoder){\n    if(!encoder){\n      return Hex.stringify(this._words, this._nSignificantBytes);\n    }\n    return encoder.stringify(this._words, this._nSignificantBytes);\n  }\n  \n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {IWord32Array} w The word array to append.\n   * @return {IWord32Array} This word array.\n   * @example\n   *   wordArray1.concat(wordArray2);\n   */\n  public concat(w: IWord32Array){\n    const words = w.slice();\n    const N = w.length();\n    \n    this.clamp();\n  \n    if(this._nSignificantBytes % 4){\n      // Copy one byte at a time\n      for(let i=0;i<N;i++){\n        const b = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        this._words[(this._nSignificantBytes + i) >>> 2] |= b << (24 - ((this._nSignificantBytes + i) % 4) * 8);\n      }\n    }\n    else {\n      // Copy one word at a time\n      for(let i=0;i<N;i+=4) {\n        this._words[(this._nSignificantBytes + i) >>> 2] = words[i >>> 2];\n      }\n    }\n    \n    this._nSignificantBytes += N;\n  \n    // Chainable\n    return this;\n  }\n  \n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *   wordArray.clamp();\n   */\n  public clamp(){\n    const n = this._nSignificantBytes;\n    this._words[n >>> 2] &= 0xffffffff << (32 - (n % 4) * 8);\n    this._words.length = Math.ceil(n / 4);\n  }\n  \n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {IWord32Array} The clone.\n   * @example\n   *   var clone = wordArray.clone();\n   */\n  public clone(){\n    return new Word32Array(this._words.slice(), this._nSignificantBytes);\n  }\n  \n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   * @return {IWord32Array} The random word array.\n   * @static\n   * @example\n   *   var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n  public static random(nBytes: number){\n    const words: number[] = [];\n    \n    for(let i=0;i<nBytes;i++){\n      words.push(random());\n    }\n    \n    return new Word32Array(words, nBytes);\n  }\n}\n","import {IWord32Array} from \"../type\";\nimport {Word32Array} from \"../Word32Array\";\nimport {Utf8} from \"../encoder/Utf8\";\n\nexport abstract class BufferedBlockAlgorithm {\n  protected _data: IWord32Array;\n  protected _nBytes: number;\n  protected _minBufferSize: number = 0;\n  protected _blockSize: number = 0;\n  \n  public constructor(data?: IWord32Array, nBytes?: number) {\n    this._data = typeof data !== \"undefined\" ? data.clone() : new Word32Array();\n    this._nBytes = typeof nBytes === \"number\" ? nBytes : 0;\n  }\n  \n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *   bufferedBlockAlgorithm.reset();\n   */\n  public reset(data?: IWord32Array, nBytes?: number){\n    this._data = typeof data !== \"undefined\" ? data.clone() : new Word32Array();\n    this._nBytes = typeof nBytes === \"number\" ? nBytes : 0;\n  }\n  \n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {IWord32Array|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n   * @example\n   *   bufferedBlockAlgorithm.append('data');\n   *   bufferedBlockAlgorithm.append(wordArray);\n   */\n  protected append(data: IWord32Array|string){\n    if(typeof data === \"string\"){\n      data = Utf8.parse(data);\n    }\n    \n    this._data.concat(data);\n    this._nBytes += data.length();\n  }\n  \n  /**\n   * Processes available data blocks.\n   * This method invokes doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean?} doFlush Whether all blocks and partial blocks should be processed.\n   * @return {IWord32Array} The processed data.\n   * @example\n   *   var processedData = bufferedBlockAlgorithm.process();\n   *   var processedData = bufferedBlockAlgorithm.process(!!'flush');\n   */\n  protected process(doFlush?: boolean){\n    let processedWords: number[]|undefined;\n    const words = this._data.raw();\n    const nSigBytes = this._data.length();\n    const blockSize = this._blockSize;\n    const blockSizeByte = this._blockSize * 4;\n    \n    let nBlocksReady = nSigBytes / blockSizeByte;\n    if(doFlush){\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    }\n    else{\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n    \n    // Count words ready\n    const nWordsReady = nBlocksReady * blockSize;\n    \n    // Count bytes ready\n    const nBytesReady = Math.min(nWordsReady * 4, nSigBytes);\n    \n    // Process blocks\n    if(nWordsReady){\n      for(let offset=0;offset<nWordsReady;offset+=blockSize){\n        // Perform concrete-algorithm logic\n        this.doProcessBlock(words, offset);\n      }\n      \n      // Remove processed words\n      processedWords = words.splice(0, nWordsReady);\n      this._data.setSignificantBytes(this._data.length() - nBytesReady);\n    }\n    \n    // Return processed words\n    return new Word32Array(processedWords, nBytesReady);\n  }\n  \n  protected abstract doProcessBlock(words: number[], offset: number): void;\n}","import {BufferedBlockAlgorithm} from \"./BufferedBlockAlgorithm\";\nimport {IWord32Array} from \"../type\";\n\nexport abstract class Hasher extends BufferedBlockAlgorithm {\n  protected _blockSize: number = 512/32;\n  \n  public constructor(blockSize?: number, data?: IWord32Array, nBytes?: number){\n    super(data, nBytes);\n    if(typeof blockSize === \"number\"){\n      this._blockSize = blockSize;\n    }\n    this.reset(data, nBytes);\n  }\n  \n  public get blockSize(){\n    return this._blockSize;\n  }\n  \n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *   hasher.reset();\n   */\n  public reset(data?: IWord32Array, nBytes?: number){\n    // Reset data buffer\n    super.reset.call(this, data, nBytes);\n    // Perform concrete-hasher logic\n    this.doReset();\n  }\n  \n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {IWord32Array|string} messageUpdate The message to append.\n   * @return {Hasher} This hasher.\n   * @example\n   *   hasher.update('message');\n   *   hasher.update(wordArray);\n   */\n  public update(messageUpdate: IWord32Array|string){\n    this.append(messageUpdate);\n    this.process();\n    return this;\n  }\n  \n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {IWord32Array|string?} messageUpdate (Optional) A final message update.\n   * @return {IWord32Array} The hash.\n   * @example\n   *   var hash = hasher.finalize();\n   *   var hash = hasher.finalize('message');\n   *   var hash = hasher.finalize(wordArray);\n   */\n  public finalize(messageUpdate?: IWord32Array|string){\n    // Final message update\n    if (messageUpdate) {\n      this.append(messageUpdate);\n    }\n  \n    // Perform concrete-hasher logic\n    return this.doFinalize();\n  }\n  \n  protected abstract doReset(): void;\n  protected abstract doFinalize(): IWord32Array;\n}\n","import {IEncoder} from \"../type\";\nimport {Word32Array} from \"../Word32Array\";\n\nexport const Hex: IEncoder = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {number[]} words An array of 32-bit words.\n   * @param {number} nSig Significant bytes\n   * @return {string} The hex string.\n   * @example\n   *   var hexString = Hex.stringify([0x293892], 6);\n   */\n  stringify(words: number[], nSig: number){\n    const hexChars: string[] = [];\n    \n    for(let i=0;i<nSig;i++){\n      const byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      hexChars.push((byte >>> 4).toString(16));\n      hexChars.push((byte & 0x0f).toString(16));\n    }\n    \n    return hexChars.join(\"\");\n  },\n  \n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   * @return {IWord32Array} The word array.\n   * @example\n   *   var wordArray = Hex.parse(hexString);\n   */\n  parse(hexStr: string){\n    const Len = hexStr.length;\n    const words: number[] = [];\n    \n    for(let i=0;i<Len;i+=2){\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n    }\n    \n    return new Word32Array(words, Len / 2);\n  }\n}\n","import {IEncoder} from \"../type\";\nimport {Word32Array} from \"../Word32Array\";\n\nexport const Latin1: IEncoder = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {number[]} words An array of 32-bit words.\n   * @param {number} nSig Significant bytes\n   * @return {string} The Latin1 string.\n   * @example\n   *   var latin1String = Latin1.stringify([0x293892], 6);\n   */\n  stringify(words: number[], nSig: number){\n    const latin1Chars: string[] = [];\n    \n    for(let i=0;i<nSig;i++){\n      const byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      latin1Chars.push(String.fromCharCode(byte));\n    }\n    \n    return latin1Chars.join(\"\");\n  },\n  \n  /**\n   * Converts a latin1 string to a word array.\n   *\n   * @param {string} latin1Str The latin1 string.\n   * @return {IWord32Array} The word array.\n   * @example\n   *   var wordArray = Latin1.parse(latin1Str);\n   */\n  parse(latin1Str: string){\n    const Len = latin1Str.length;\n    const words: number[] = [];\n    \n    for(let i=0;i<Len;i++){\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n    }\n    \n    return new Word32Array(words, Len);\n  }\n}\n","import {IEncoder} from \"../type\";\nimport {Latin1} from \"./Latin1\";\n\nexport const Utf8: IEncoder = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {number[]} words An array of 32-bit words.\n   * @param {number} nSig Significant bytes\n   * @return {string} The UTF-8 string.\n   * @example\n   *   var utf8String = Utf8.stringify([0x293892], 6);\n   */\n  stringify(words: number[], nSig: number){\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(words, nSig)));\n    }\n    catch (e) {\n      throw new Error(\"Malformed UTF-8 data\");\n    }\n  },\n  \n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   * @return {IWord32Array} The word array.\n   * @example\n   *   var wordArray = Utf8.parse(utf8Str);\n   */\n  parse(utf8Str: string){\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n}\n","interface WindowEx extends Window {\n  /**\n   * Native (experimental IE 11) crypto from window (Browser)\n   */\n  msCrypto?: Crypto;\n}\n\n/**\n * @ignore\n */\ndeclare let window: WindowEx;\ntype NodeCrypto = { randomBytes: (size: number) => { readInt32LE: () => number } };\n\nfunction makeRandFunction(): () => number {\n  const crypto: Crypto | NodeCrypto = (() => {\n    // Native crypto from window (Browser)\n    if (typeof window !== \"undefined\") {\n      const c = window.crypto || window.msCrypto;\n      if (!c) {\n        throw new Error(\"Crypto module not found\");\n      }\n      return c;\n    }\n    else if (typeof global !== \"undefined\" && global.crypto) {\n      return global.crypto as Crypto | NodeCrypto;\n    }\n    throw new Error(\"Unable to find crypto module\");\n  })();\n  \n  if (typeof (crypto as Crypto).getRandomValues === \"function\") {\n    return function rand() {\n      return (crypto as Crypto).getRandomValues(new Uint32Array(1))[0];\n    };\n  }\n  \n  if (typeof (crypto as NodeCrypto).randomBytes === \"function\") {\n    return function rand() {\n      return (crypto as NodeCrypto).randomBytes(4).readInt32LE();\n    }\n  }\n  \n  throw new Error(\"Unable to find crypto module\");\n}\n\nexport const random = makeRandFunction();\n"],"sourceRoot":""}