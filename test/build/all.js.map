{"version":3,"sources":["webpack://JsCrypto/webpack/universalModuleDefinition","webpack://JsCrypto/webpack/bootstrap","webpack://JsCrypto/(webpack)/buildin/global.js","webpack://JsCrypto/./src/AES.ts","webpack://JsCrypto/./src/Hmac.ts","webpack://JsCrypto/./src/HmacMD5.ts","webpack://JsCrypto/./src/HmacSHA224.ts","webpack://JsCrypto/./src/HmacSHA256.ts","webpack://JsCrypto/./src/HmacSHA384.ts","webpack://JsCrypto/./src/HmacSHA512.ts","webpack://JsCrypto/./src/MD5.ts","webpack://JsCrypto/./src/SHA1.ts","webpack://JsCrypto/./src/SHA224.ts","webpack://JsCrypto/./src/SHA256.ts","webpack://JsCrypto/./src/SHA3.ts","webpack://JsCrypto/./src/SHA384.ts","webpack://JsCrypto/./src/SHA512.ts","webpack://JsCrypto/./src/all.ts","webpack://JsCrypto/./src/lib/Word32Array.ts","webpack://JsCrypto/./src/lib/Word64Array.ts","webpack://JsCrypto/./src/lib/algorithm/BufferedBlockAlgorithm.ts","webpack://JsCrypto/./src/lib/algorithm/Hasher.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/BlockCipher.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/Cipher.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/CipherParams.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/PasswordBasedCipher.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/SerializableCipher.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/formatter/OpenSSLFormatter.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/kdf/EvpKDF.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/kdf/OpenSSLKDF.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/mode/BlockCipherMode.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/mode/CBC.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/mode/CFB.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/mode/CTR.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/mode/ECB.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/mode/OFB.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/pad/AnsiX923.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/pad/ISO10126.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/pad/ISO97971.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/pad/Noop.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/pad/Pkcs7.ts","webpack://JsCrypto/./src/lib/algorithm/cipher/pad/Zero.ts","webpack://JsCrypto/./src/lib/encoder/Base64.ts","webpack://JsCrypto/./src/lib/encoder/Hex.ts","webpack://JsCrypto/./src/lib/encoder/Latin1.ts","webpack://JsCrypto/./src/lib/encoder/Utf8.ts","webpack://JsCrypto/./src/lib/random.ts","webpack://JsCrypto/./src/mode/CBC.ts","webpack://JsCrypto/./src/mode/CFB.ts","webpack://JsCrypto/./src/mode/CTR.ts","webpack://JsCrypto/./src/mode/ECB.ts","webpack://JsCrypto/./src/mode/OFB.ts","webpack://JsCrypto/./src/pad/AnsiX923.ts","webpack://JsCrypto/./src/pad/ISO10126.ts","webpack://JsCrypto/./src/pad/ISO97971.ts","webpack://JsCrypto/./src/pad/Noop.ts","webpack://JsCrypto/./src/pad/Zero.ts"],"names":[],"mappings":"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AAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAE5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAE5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAE5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAG,CAAC,EAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE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AE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC;IACtE,IAAI,uDAAM,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,IAAI,uDAAM,CAAC,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C,CAAC;QAC1D,GAAG,GAAG,EAAE,CAAC,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;QAC3B,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,GAAG,GAAG,EAAE,CAAC,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;QAC3B,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,GAAG,GAAG,EAAE,CAAC,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;QAC3B,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,GAAG,GAAG,EAAE,CAAC,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;QAC3B,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,GAAG,GAAG,EAAE,CAAC,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;QAC3B,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,GAAG,GAAG,EAAE,CAAC,GAAG,GA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","file":"all.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JsCrypto\"] = factory();\n\telse\n\t\troot[\"JsCrypto\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/all.ts\");\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import {Cipher, CipherProps, PropsWithKey} from \"./lib/algorithm/cipher/Cipher\";\nimport type {Word32Array} from \"./lib/Word32Array\";\nimport {BlockCipher, BlockCipherProps} from \"./lib/algorithm/cipher/BlockCipher\";\nimport {PasswordBasedCipher} from \"./lib/algorithm/cipher/PasswordBasedCipher\";\nimport {SerializableCipher} from \"./lib/algorithm/cipher/SerializableCipher\";\nimport type {CipherParams} from \"./lib/algorithm/cipher/CipherParams\";\n\n// Lookup tables\nconst SBOX: number[] = [];\nconst INV_SBOX: number[] = [];\nconst SUB_MIX_0: number[] = [];\nconst SUB_MIX_1: number[] = [];\nconst SUB_MIX_2: number[] = [];\nconst SUB_MIX_3: number[] = [];\nconst INV_SUB_MIX_0: number[] = [];\nconst INV_SUB_MIX_1: number[] = [];\nconst INV_SUB_MIX_2: number[] = [];\nconst INV_SUB_MIX_3: number[] = [];\n\n(function computeLookupTables() {\n  // Compute double table\n  const d: number[] = [];\n  for (let i = 0; i < 256; i++) {\n    if (i < 128) {\n      d[i] = i << 1;\n    } else {\n      d[i] = (i << 1) ^ 0x11b;\n    }\n  }\n  \n  // Walk GF(2^8)\n  let x = 0;\n  let xi = 0;\n  for (let i = 0; i < 256; i++) {\n    // Compute sbox\n    let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n    SBOX[x] = sx;\n    INV_SBOX[sx] = x;\n    \n    // Compute multiplication\n    const x2 = d[x];\n    const x4 = d[x2];\n    const x8 = d[x4];\n    \n    // Compute sub bytes, mix columns tables\n    let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n    SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n    SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n    SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n    SUB_MIX_3[x] = t;\n    \n    // Compute inv sub bytes, inv mix columns tables\n    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n    INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n    INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n    INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n    INV_SUB_MIX_3[sx] = t;\n    \n    // Compute next counter\n    if (!x) {\n      x = xi = 1;\n    } else {\n      x = x2 ^ d[d[d[x8 ^ x2]]];\n      xi ^= d[d[xi]];\n    }\n  }\n}());\n\n// Precomputed Rcon lookup\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\nexport interface AESProps extends BlockCipherProps {\n}\n\nexport class AES extends BlockCipher {\n  public static readonly keySize = 256/32;\n  protected _props: PropsWithKey<AESProps>;\n  protected _nRounds: number = 0;\n  protected _keyPriorReset: Word32Array|undefined;\n  protected _keySchedule: number[] = [];\n  protected _invKeySchedule: number[] = [];\n  \n  public constructor(props: PropsWithKey<AESProps>) {\n    super(props);\n    this._props = props;\n    \n    this._doReset();\n  }\n  \n  protected _doReset() {\n    let t;\n  \n    // Skip reset of nRounds has been set before and key did not change\n    if (this._nRounds && this._keyPriorReset === this._key) {\n      return;\n    }\n  \n    // Shortcuts\n    const key = this._keyPriorReset = this._key;\n    const keyWords = key.words;\n    const keySize = key.nSigBytes / 4;\n  \n    // Compute number of rounds\n    const nRounds = this._nRounds = keySize + 6;\n  \n    // Compute number of key schedule rows\n    const ksRows = (nRounds + 1) * 4;\n  \n    // Compute key schedule\n    const keySchedule: number[] = this._keySchedule = [];\n    for (let ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        keySchedule[ksRow] = keyWords[ksRow];\n      }\n      else {\n        t = keySchedule[ksRow - 1];\n      \n        if (!(ksRow % keySize)) {\n          // Rot word\n          t = (t << 8) | (t >>> 24);\n        \n          // Sub word\n          t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n        \n          // Mix Rcon\n          t ^= RCON[(ksRow / keySize) | 0] << 24;\n        }\n        else if (keySize > 6 && ksRow % keySize === 4) {\n          // Sub word\n          t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n        }\n      \n        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n      }\n    }\n  \n    // Compute inv key schedule\n    this._invKeySchedule = [];\n    for (let invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      const ksRow = ksRows - invKsRow;\n      \n      if (invKsRow % 4) {\n        t = keySchedule[ksRow];\n      }\n      else {\n        t = keySchedule[ksRow - 4];\n      }\n    \n      if (invKsRow < 4 || ksRow <= 4) {\n        this._invKeySchedule[invKsRow] = t;\n      }\n      else {\n        this._invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n          INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n      }\n    }\n  }\n  \n  public encryptBlock(words: number[], offset: number) {\n    this._doCryptBlock(words, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n  }\n  \n  public decryptBlock(words: number[], offset: number) {\n    // Swap 2nd and 4th rows\n    let t = words[offset + 1];\n    words[offset + 1] = words[offset + 3];\n    words[offset + 3] = t;\n  \n    this._doCryptBlock(words, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n  \n    // Inv swap 2nd and 4th rows\n    t = words[offset + 1];\n    words[offset + 1] = words[offset + 3];\n    words[offset + 3] = t;\n  }\n  \n  protected _doCryptBlock(\n    words: number[],\n    offset: number,\n    keySchedule: number[],\n    subMix0: number[],\n    subMix1: number[],\n    subMix2: number[],\n    subMix3: number[],\n    sBox: number[],\n  ){\n    // Shortcut\n    const nRounds = this._nRounds;\n  \n    // Get input, add round key\n    let s0 = words[offset]     ^ keySchedule[0];\n    let s1 = words[offset + 1] ^ keySchedule[1];\n    let s2 = words[offset + 2] ^ keySchedule[2];\n    let s3 = words[offset + 3] ^ keySchedule[3];\n  \n    // Key schedule row counter\n    let ksRow = 4;\n  \n    // Rounds\n    for (let round = 1; round < nRounds; round++) {\n      // Shift rows, sub bytes, mix columns, add round key\n      const _s0 = subMix0[s0 >>> 24] ^ subMix1[(s1 >>> 16) & 0xff]\n        ^ subMix2[(s2 >>> 8) & 0xff] ^ subMix3[s3 & 0xff] ^ keySchedule[ksRow++];\n      const _s1 = subMix0[s1 >>> 24] ^ subMix1[(s2 >>> 16) & 0xff]\n        ^ subMix2[(s3 >>> 8) & 0xff] ^ subMix3[s0 & 0xff] ^ keySchedule[ksRow++];\n      const _s2 = subMix0[s2 >>> 24] ^ subMix1[(s3 >>> 16) & 0xff]\n        ^ subMix2[(s0 >>> 8) & 0xff] ^ subMix3[s1 & 0xff] ^ keySchedule[ksRow++];\n      const _s3 = subMix0[s3 >>> 24] ^ subMix1[(s0 >>> 16) & 0xff]\n        ^ subMix2[(s1 >>> 8) & 0xff] ^ subMix3[s2 & 0xff] ^ keySchedule[ksRow++];\n    \n      // Update state\n      s0 = _s0;\n      s1 = _s1;\n      s2 = _s2;\n      s3 = _s3;\n    }\n  \n    // Shift rows, sub bytes, add round key\n    const t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16)\n      | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n    const t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16)\n      | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n    const t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16)\n      | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n    const t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16)\n      | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n  \n    // Set output\n    words[offset]     = t0;\n    words[offset + 1] = t1;\n    words[offset + 2] = t2;\n    words[offset + 3] = t3;\n  }\n  \n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = JsCrypto.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createEncryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new AES({...props, key, transformMode: Cipher.ENC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Creates this cipher in decryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = JsCrypto.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createDecryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new AES({...props, key, transformMode: Cipher.DEC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Encrypt a message with key\n   * \n   * @param {Word32Array|string} message\n   * @param {Word32Array|string} key\n   * @param {Partial<AESProps>?} props\n   * @example\n   *   var encryptedMessage = JsCrypt.AES.encrypt(\"test\", \"pass\");\n   */\n  public static encrypt(message: Word32Array|string, key: Word32Array|string, props?: Partial<AESProps>){\n    if(typeof key === \"string\"){\n      return PasswordBasedCipher.encrypt(AES, message, key, props);\n    }\n    return SerializableCipher.encrypt(AES, message, key, props);\n  }\n  \n  /**\n   * Encrypt a encrypted message with key\n   *\n   * @param {CipherParams} cipherText\n   * @param {Word32Array|string} key\n   * @param {Partial<AESProps>?} props\n   * @example\n   *   var encryptedMessage = JsCrypt.AES.decrypt(cipherProps, \"pass\");\n   */\n  public static decrypt(cipherText: CipherParams, key: Word32Array|string, props?: Partial<AESProps>){\n    if(typeof key === \"string\"){\n      return PasswordBasedCipher.decrypt(AES, cipherText, key, props);\n    }\n    return SerializableCipher.decrypt(AES, cipherText, key, props);\n  }\n}\n","import {Utf8} from \"./lib/encoder/Utf8\";\nimport type {Hasher} from \"./lib/algorithm/Hasher\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport class Hmac {\n  private _hasher: Hasher;\n  private _oKey: Word32Array;\n  private _iKey: Word32Array;\n  \n  public constructor(hasher: Hasher, key: Word32Array|string) {\n    this._hasher = hasher;\n  \n    // Convert string to WordArray, else assume WordArray already\n    if (typeof key == \"string\") {\n      key = Utf8.parse(key);\n    }\n    \n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4;\n    \n    // Allow arbitrary length keys\n    if(key.nSigBytes > hasherBlockSizeBytes){\n      key = hasher.finalize(key);\n    }\n  \n    // Clamp excess bits\n    key.clamp();\n    \n    const oKey = this._oKey = key.clone();\n    const iKey = this._iKey = key.clone();\n    \n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words;\n    \n    for(let i=0;i<hasherBlockSize;i++){\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n    iKey.nSigBytes = hasherBlockSizeBytes;\n    oKey.nSigBytes = hasherBlockSizeBytes;\n    \n    // Set initial values\n    this.reset();\n  }\n  \n  /**\n   * Resets this Hmac to its initial state.\n   *\n   * @example\n   *   hmacHasher.reset();\n   */\n  public reset(){\n    this._hasher.reset();\n    this._hasher.update(this._iKey);\n  }\n  \n  /**\n   * Updates this Hmac with a message.\n   *\n   * @param {Word32Array|string} messageUpdate The message to append.\n   * @return {Hmac} This Hmac instance.\n   * @example\n   *   hmacHasher.update('message');\n   *   hmacHasher.update(wordArray);\n   */\n  public update(messageUpdate: Word32Array|string){\n    this._hasher.update(messageUpdate);\n    return this;\n  }\n  \n  /**\n   * Finalizes the Hmac computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {Word32Array|string} messageUpdate (Optional) A final message update.\n   * @return {Word32Array} The Hmac.\n   * @example\n   *   var hmac = hmacHasher.finalize();\n   *   var hmac = hmacHasher.finalize('message');\n   *   var hmac = hmacHasher.finalize(wordArray);\n   */\n  public finalize(messageUpdate: Word32Array|string){\n    const innerHash = this._hasher.finalize(messageUpdate);\n    this._hasher.reset();\n    return this._hasher.finalize(this._oKey.clone().concat(innerHash));\n  }\n}\n","import {Hmac} from \"./Hmac\";\nimport {MD5} from \"./MD5\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport function HmacMD5(message: Word32Array|string, key: Word32Array|string){\n  return new Hmac(new MD5(), key).finalize(message);\n}\n","import {Hmac} from \"./Hmac\";\nimport {SHA224} from \"./SHA224\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport function HmacSHA224(message: Word32Array|string, key: Word32Array|string){\n  return new Hmac(new SHA224(), key).finalize(message);\n}\n","import {Hmac} from \"./Hmac\";\nimport {SHA256} from \"./SHA256\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport function HmacSHA256(message: Word32Array|string, key: Word32Array|string){\n  return new Hmac(new SHA256(), key).finalize(message);\n}\n","import {Hmac} from \"./Hmac\";\nimport {SHA384} from \"./SHA384\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport function HmacSHA384(message: Word32Array|string, key: Word32Array|string){\n  return new Hmac(new SHA384(), key).finalize(message);\n}\n","import {Hmac} from \"./Hmac\";\nimport {SHA512} from \"./SHA512\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport function HmacSHA512(message: Word32Array|string, key: Word32Array|string){\n  return new Hmac(new SHA512(), key).finalize(message);\n}\n","import {Word32Array} from \"./lib/Word32Array\";\nimport {Hasher, HasherProps} from \"./lib/algorithm/Hasher\";\n\nexport interface MD5Props extends HasherProps {\n  hash: Word32Array;\n}\n\n// Constants table\nconst T: number[] = [];\n\n(function computeConstant(){\n  for(let i=0;i<64;i++){\n    T[i] = (Math.abs(Math.sin(i+1)) * 0x100000000) | 0;\n  }\n})();\n\nfunction FF(a: number, b: number, c: number, d: number, x: number, s: number, t: number){\n  const n = a + ((b & c) | (~b & d)) + x + t;\n  return ((n << s) | (n >>> (32 - s))) + b;\n}\n\nfunction GG(a: number, b: number, c: number, d: number, x: number, s: number, t: number){\n  const n = a + ((b & d) | (c & ~d)) + x + t;\n  return ((n << s) | (n >>> (32 - s))) + b;\n}\n\nfunction HH(a: number, b: number, c: number, d: number, x: number, s: number, t: number){\n  const n = a + (b ^ c ^ d) + x + t;\n  return ((n << s) | (n >>> (32 - s))) + b;\n}\n\nfunction II(a: number, b: number, c: number, d: number, x: number, s: number, t: number){\n  const n = a + (c ^ (b | ~d)) + x + t;\n  return ((n << s) | (n >>> (32 - s))) + b;\n}\n\n/**\n * MD5 hash algorithm\n */\nexport class MD5 extends Hasher {\n  private _hash: Word32Array = new Word32Array([\n    0x67452301, 0xefcdab89,\n    0x98badcfe, 0x10325476\n  ]);\n  \n  public constructor(props?: MD5Props) {\n    super(props);\n    if(props && typeof props.hash !== \"undefined\"){\n      this._hash = props.hash.clone();\n    }\n  }\n  \n  protected _doReset() {\n    this._hash = new Word32Array([\n      0x67452301, 0xefcdab89,\n      0x98badcfe, 0x10325476\n    ]);\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    // Swap endian\n    for (let i=0;i<16;i++) {\n      // Shortcuts\n      const offsetI = offset + i;\n      const wordsOffsetI = words[offsetI];\n    \n      words[offsetI] = (\n        (((wordsOffsetI << 8)  | (wordsOffsetI >>> 24)) & 0x00ff00ff)\n        | (((wordsOffsetI << 24) | (wordsOffsetI >>> 8))  & 0xff00ff00)\n      );\n    }\n  \n    // Shortcuts\n    const H = this._hash.words;\n  \n    const wordOffset0  = words[offset];\n    const wordOffset1  = words[offset + 1];\n    const wordOffset2  = words[offset + 2];\n    const wordOffset3  = words[offset + 3];\n    const wordOffset4  = words[offset + 4];\n    const wordOffset5  = words[offset + 5];\n    const wordOffset6  = words[offset + 6];\n    const wordOffset7  = words[offset + 7];\n    const wordOffset8  = words[offset + 8];\n    const wordOffset9  = words[offset + 9];\n    const wordOffset10 = words[offset + 10];\n    const wordOffset11 = words[offset + 11];\n    const wordOffset12 = words[offset + 12];\n    const wordOffset13 = words[offset + 13];\n    const wordOffset14 = words[offset + 14];\n    const wordOffset15 = words[offset + 15];\n  \n    // Working variables\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n  \n    // Computation\n    a = FF(a, b, c, d, wordOffset0,  7,  T[0]);\n    d = FF(d, a, b, c, wordOffset1,  12, T[1]);\n    c = FF(c, d, a, b, wordOffset2,  17, T[2]);\n    b = FF(b, c, d, a, wordOffset3,  22, T[3]);\n    a = FF(a, b, c, d, wordOffset4,  7,  T[4]);\n    d = FF(d, a, b, c, wordOffset5,  12, T[5]);\n    c = FF(c, d, a, b, wordOffset6,  17, T[6]);\n    b = FF(b, c, d, a, wordOffset7,  22, T[7]);\n    a = FF(a, b, c, d, wordOffset8,  7,  T[8]);\n    d = FF(d, a, b, c, wordOffset9,  12, T[9]);\n    c = FF(c, d, a, b, wordOffset10, 17, T[10]);\n    b = FF(b, c, d, a, wordOffset11, 22, T[11]);\n    a = FF(a, b, c, d, wordOffset12, 7,  T[12]);\n    d = FF(d, a, b, c, wordOffset13, 12, T[13]);\n    c = FF(c, d, a, b, wordOffset14, 17, T[14]);\n    b = FF(b, c, d, a, wordOffset15, 22, T[15]);\n  \n    a = GG(a, b, c, d, wordOffset1,  5,  T[16]);\n    d = GG(d, a, b, c, wordOffset6,  9,  T[17]);\n    c = GG(c, d, a, b, wordOffset11, 14, T[18]);\n    b = GG(b, c, d, a, wordOffset0,  20, T[19]);\n    a = GG(a, b, c, d, wordOffset5,  5,  T[20]);\n    d = GG(d, a, b, c, wordOffset10, 9,  T[21]);\n    c = GG(c, d, a, b, wordOffset15, 14, T[22]);\n    b = GG(b, c, d, a, wordOffset4,  20, T[23]);\n    a = GG(a, b, c, d, wordOffset9,  5,  T[24]);\n    d = GG(d, a, b, c, wordOffset14, 9,  T[25]);\n    c = GG(c, d, a, b, wordOffset3,  14, T[26]);\n    b = GG(b, c, d, a, wordOffset8,  20, T[27]);\n    a = GG(a, b, c, d, wordOffset13, 5,  T[28]);\n    d = GG(d, a, b, c, wordOffset2,  9,  T[29]);\n    c = GG(c, d, a, b, wordOffset7,  14, T[30]);\n    b = GG(b, c, d, a, wordOffset12, 20, T[31]);\n  \n    a = HH(a, b, c, d, wordOffset5,  4,  T[32]);\n    d = HH(d, a, b, c, wordOffset8,  11, T[33]);\n    c = HH(c, d, a, b, wordOffset11, 16, T[34]);\n    b = HH(b, c, d, a, wordOffset14, 23, T[35]);\n    a = HH(a, b, c, d, wordOffset1,  4,  T[36]);\n    d = HH(d, a, b, c, wordOffset4,  11, T[37]);\n    c = HH(c, d, a, b, wordOffset7,  16, T[38]);\n    b = HH(b, c, d, a, wordOffset10, 23, T[39]);\n    a = HH(a, b, c, d, wordOffset13, 4,  T[40]);\n    d = HH(d, a, b, c, wordOffset0,  11, T[41]);\n    c = HH(c, d, a, b, wordOffset3,  16, T[42]);\n    b = HH(b, c, d, a, wordOffset6,  23, T[43]);\n    a = HH(a, b, c, d, wordOffset9,  4,  T[44]);\n    d = HH(d, a, b, c, wordOffset12, 11, T[45]);\n    c = HH(c, d, a, b, wordOffset15, 16, T[46]);\n    b = HH(b, c, d, a, wordOffset2,  23, T[47]);\n  \n    a = II(a, b, c, d, wordOffset0,  6,  T[48]);\n    d = II(d, a, b, c, wordOffset7,  10, T[49]);\n    c = II(c, d, a, b, wordOffset14, 15, T[50]);\n    b = II(b, c, d, a, wordOffset5,  21, T[51]);\n    a = II(a, b, c, d, wordOffset12, 6,  T[52]);\n    d = II(d, a, b, c, wordOffset3,  10, T[53]);\n    c = II(c, d, a, b, wordOffset10, 15, T[54]);\n    b = II(b, c, d, a, wordOffset1,  21, T[55]);\n    a = II(a, b, c, d, wordOffset8,  6,  T[56]);\n    d = II(d, a, b, c, wordOffset15, 10, T[57]);\n    c = II(c, d, a, b, wordOffset6,  15, T[58]);\n    b = II(b, c, d, a, wordOffset13, 21, T[59]);\n    a = II(a, b, c, d, wordOffset4,  6,  T[60]);\n    d = II(d, a, b, c, wordOffset11, 10, T[61]);\n    c = II(c, d, a, b, wordOffset2,  15, T[62]);\n    b = II(b, c, d, a, wordOffset9,  21, T[63]);\n  \n    // Intermediate hash value\n    H[0] = (H[0] + a) | 0;\n    H[1] = (H[1] + b) | 0;\n    H[2] = (H[2] + c) | 0;\n    H[3] = (H[3] + d) | 0;\n  }\n  \n  protected _doFinalize(): Word32Array {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n  \n    const nBitsTotal = this._nBytes * 8;\n    const nBitsLeft = data.nSigBytes * 8;\n  \n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n  \n    const nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n    const nBitsTotalL = nBitsTotal;\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n      (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n      (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n    );\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n      (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n      (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n    );\n  \n    data.nSigBytes = (dataWords.length + 1) * 4;\n  \n    // Hash final blocks\n    this._process();\n  \n    // Shortcuts\n    const hash = this._hash;\n    const H = hash.words;\n  \n    // Swap endian\n    for (let i=0;i<4;i++) {\n      // Shortcut\n      const Hi = H[i];\n      H[i] = (((Hi << 8)  | (Hi >>> 24)) & 0x00ff00ff)\n        | (((Hi << 24) | (Hi >>> 8))  & 0xff00ff00);\n    }\n  \n    // Return final computed hash\n    return hash;\n  }\n  \n  public clone(){\n    const props = {hash: this._hash, blockSize: this._blockSize, data: this._data, nBytes: this._nBytes};\n    return new MD5(props);\n  }\n  \n  public static hash(message: Word32Array|string){\n    return new MD5().finalize(message);\n  }\n}\n","import {Hasher, HasherProps} from \"./lib/algorithm/Hasher\";\nimport {Word32Array} from \"./lib/Word32Array\";\n\nexport interface SHA1Props extends HasherProps {\n  hash: Word32Array;\n}\n\n// Reusable object\nconst W: number[] = [];\n\nexport class SHA1 extends Hasher {\n  protected _props?: Partial<SHA1Props>;\n  private _hash: Word32Array = new Word32Array([\n    0x67452301, 0xefcdab89,\n    0x98badcfe, 0x10325476,\n    0xc3d2e1f0\n  ]);\n  \n  public constructor(props?: SHA1Props) {\n    super(props);\n    this._props = props;\n    if(props && typeof props.hash !== \"undefined\"){\n      this._hash = props.hash.clone();\n    }\n  }\n  \n  protected _doReset() {\n    this._hash = new Word32Array([\n      0x67452301, 0xefcdab89,\n      0x98badcfe, 0x10325476,\n      0xc3d2e1f0\n    ]);\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    const H = this._hash.words;\n  \n    // Working variables\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n  \n    // Computation\n    for(let i=0;i<80;i++){\n      if (i < 16) {\n        W[i] = words[offset + i] | 0;\n      }\n      else {\n        const n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n        W[i] = (n << 1) | (n >>> 31);\n      }\n    \n      let t = ((a << 5) | (a >>> 27)) + e + W[i];\n      if (i < 20) {\n        t += ((b & c) | (~b & d)) + 0x5a827999;\n      }\n      else if (i < 40) {\n        t += (b ^ c ^ d) + 0x6ed9eba1;\n      }\n      else if (i < 60) {\n        t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n      }\n      else /* if (i < 80) */ {\n        t += (b ^ c ^ d) - 0x359d3e2a;\n      }\n    \n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n  \n    // Intermediate hash value\n    H[0] = (H[0] + a) | 0;\n    H[1] = (H[1] + b) | 0;\n    H[2] = (H[2] + c) | 0;\n    H[3] = (H[3] + d) | 0;\n    H[4] = (H[4] + e) | 0;\n  }\n  \n  protected _doFinalize(): Word32Array {\n    // Shortcuts\n    const dataWords = this._data.words;\n  \n    const nBitsTotal = this._nBytes * 8;\n    const nBitsLeft = this._data.nSigBytes * 8;\n  \n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n    this._data.nSigBytes = dataWords.length * 4;\n  \n    // Hash final blocks\n    this._process();\n  \n    // Return final computed hash\n    return this._hash;\n  }\n  \n  public clone(){\n    const props = {hash: this._hash, blockSize: this._blockSize, data: this._data, nBytes: this._nBytes};\n    return new SHA1(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA1Props){\n    return new SHA1(props).finalize(message);\n  }\n}\n","import {Word32Array} from \"./lib/Word32Array\";\nimport {SHA256} from \"./SHA256\";\nimport type {HasherProps} from \"./lib/algorithm/Hasher\";\n\nexport interface SHA224Props extends HasherProps {\n  hash: Word32Array;\n}\n\nexport class SHA224 extends SHA256 {\n  protected _props?: Partial<SHA224Props>;\n  protected _hash: Word32Array = new Word32Array([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n  ]);\n  \n  public constructor(props?: SHA224Props) {\n    super(props);\n    this._props = props;\n    if(props && typeof props.hash !== \"undefined\"){\n      this._hash = props.hash.clone();\n    }\n  }\n  \n  protected _doReset() {\n    this._hash = new Word32Array([\n      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n    ]);\n  }\n  \n  protected _doFinalize(): Word32Array {\n    const hash = super._doFinalize.call(this);\n    hash.nSigBytes -= 4;\n    return hash;\n  }\n  \n  public clone(){\n    const props = {hash: this._hash, blockSize: this._blockSize, data: this._data, nBytes: this._nBytes};\n    return new SHA224(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA224Props){\n    return new SHA224(props).finalize(message);\n  }\n}\n","import {Hasher, HasherProps} from \"./lib/algorithm/Hasher\";\nimport {Word32Array} from \"./lib/Word32Array\";\n\nexport interface SHA256Props extends HasherProps {\n  hash: Word32Array;\n}\n\n// Hash values\nconst H: number[] = [];\n// Round constants\nconst K: number[] = [];\n\nfunction isPrime(n: number){\n  const sqrtN = Math.sqrt(n);\n  for(let factor=2;factor<=sqrtN;factor++){\n    if(!(n % factor)){\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getFractionalBits(n: number) {\n  return ((n - (n | 0)) * 0x100000000) | 0;\n}\n\n(function computeRoundConstants(){\n  let n = 2;\n  let nPrime = 0;\n  while(nPrime < 64){\n    if(isPrime(n)){\n      if(nPrime < 8){\n        H[nPrime] = getFractionalBits(Math.pow(n, 1/2));\n      }\n      K[nPrime] = getFractionalBits(Math.pow(n, 1/3));\n      nPrime++;\n    }\n    n++;\n  }\n})();\n\n// Reusable object\nconst W: number[] = [];\n\nexport class SHA256 extends Hasher {\n  protected _props?: Partial<SHA256Props>;\n  protected _hash: Word32Array = new Word32Array(H.slice(0));\n  \n  public constructor(props?: SHA256Props) {\n    super(props);\n    this._props = props;\n    if(props && typeof props.hash !== \"undefined\"){\n      this._hash = props.hash.clone();\n    }\n  }\n  \n  protected _doReset() {\n    this._hash = new Word32Array(H.slice(0));\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    const _H = this._hash.words;\n    \n    let a = _H[0];\n    let b = _H[1];\n    let c = _H[2];\n    let d = _H[3];\n    let e = _H[4];\n    let f = _H[5];\n    let g = _H[6];\n    let h = _H[7];\n    \n    for(let i=0;i<64;i++){\n      if(i < 16){\n        W[i] = words[offset + i] | 0;\n      }\n      else{\n        const gamma0x = W[i-15];\n        const gamma0 = ((gamma0x << 25) | (gamma0x >>> 7))\n          ^ ((gamma0x << 14) | (gamma0x >>> 18))\n          ^ (gamma0x >>> 3);\n  \n        const gamma1x = W[i - 2];\n        const gamma1  = ((gamma1x << 15) | (gamma1x >>> 17))\n          ^ ((gamma1x << 13) | (gamma1x >>> 19))\n          ^ (gamma1x >>> 10);\n  \n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n  \n      const ch  = (e & f) ^ (~e & g);\n      const maj = (a & b) ^ (a & c) ^ (b & c);\n  \n      const sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n      const sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n  \n      const t1 = h + sigma1 + ch + K[i] + W[i];\n      const t2 = sigma0 + maj;\n  \n      h = g;\n      g = f;\n      f = e;\n      e = (d + t1) | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = (t1 + t2) | 0;\n    }\n  \n    // Intermediate hash value\n    _H[0] = (_H[0] + a) | 0;\n    _H[1] = (_H[1] + b) | 0;\n    _H[2] = (_H[2] + c) | 0;\n    _H[3] = (_H[3] + d) | 0;\n    _H[4] = (_H[4] + e) | 0;\n    _H[5] = (_H[5] + f) | 0;\n    _H[6] = (_H[6] + g) | 0;\n    _H[7] = (_H[7] + h) | 0;\n  }\n  \n  protected _doFinalize(): Word32Array {\n    const words = this._data.words;\n    const nBitsTotal = this._nBytes * 8;\n    const nBitsLeft = this._data.nSigBytes * 8;\n  \n    // Add padding\n    words[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n    words[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    words[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n    this._data.nSigBytes = words.length * 4;\n  \n    // Hash final blocks\n    this._process();\n  \n    // Return final computed hash\n    return this._hash;\n  }\n  \n  public clone() {\n    const props = {hash: this._hash, blockSize: this._blockSize, data: this._data, nBytes: this._nBytes};\n    return new SHA256(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA256Props){\n    return new SHA256(props).finalize(message);\n  }\n}\n","// Constants tables\nimport {Word64} from \"./lib/Word64Array\";\nimport {Hasher, HasherProps} from \"./lib/algorithm/Hasher\";\nimport {Word32Array} from \"./lib/Word32Array\";\n\nexport interface SHA3Props extends HasherProps {\n  state: Word64[];\n  outputLength: number;\n}\n\nconst RHO_OFFSETS: number[] = [];\nconst PI_INDEXES: number[]  = [];\nconst ROUND_CONSTANTS: Word64[] = [];\n\n// Compute Constants\n(function computeConstants() {\n  // Compute rho offset constants\n  let x = 1;\n  let y = 0;\n  for (let t = 0; t < 24; t++) {\n    RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n    \n    const newX = y % 5;\n    const newY = (2 * x + 3 * y) % 5;\n    x = newX;\n    y = newY;\n  }\n  \n  // Compute pi index constants\n  for (let p = 0; p < 5; p++) {\n    for (let q = 0; q < 5; q++) {\n      PI_INDEXES[p + 5 * q] = q + ((2 * p + 3 * q) % 5) * 5;\n    }\n  }\n  \n  // Compute round constants\n  let LFSR = 0x01;\n  for (let i = 0; i < 24; i++) {\n    let roundConstantMsw = 0;\n    let roundConstantLsw = 0;\n    \n    for (let j = 0; j < 7; j++) {\n      if (LFSR & 0x01) {\n        const bitPosition = (1 << j) - 1;\n        if (bitPosition < 32) {\n          roundConstantLsw ^= 1 << bitPosition;\n        } else /* if (bitPosition >= 32) */ {\n          roundConstantMsw ^= 1 << (bitPosition - 32);\n        }\n      }\n      \n      // Compute next LFSR\n      if (LFSR & 0x80) {\n        // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n        LFSR = (LFSR << 1) ^ 0x71;\n      } else {\n        LFSR <<= 1;\n      }\n    }\n    \n    ROUND_CONSTANTS[i] = new Word64(roundConstantMsw, roundConstantLsw);\n  }\n}());\n\n// Reusable objects for temporary values\nconst T: Word64[] = [];\n(function () {\n  for(let i = 0; i < 25; i++) {\n    T[i] = new Word64(0, 0);\n  }\n}());\n\nexport class SHA3 extends Hasher {\n  protected _props?: Partial<SHA3Props>;\n  protected _blockSize = 1024/32;\n  protected _state: Word64[] = []\n  protected _outputLength: number = 512;\n  \n  public constructor(props?: Partial<SHA3Props>) {\n    super(props);\n    this._props = props;\n    \n    if(props){\n      if(typeof props.outputLength !== \"undefined\"){\n        if(![224,256,384,512].includes(props.outputLength)){\n          throw new Error(\"Unsupported output length.\");\n        }\n        this._outputLength = props.outputLength;\n      }\n      if(typeof props.state !== \"undefined\"){\n        this._state = props.state.map(s => s.clone());\n      }\n    }\n    \n    if(this._state.length === 0){\n      for(let i=0;i<25;i++){\n        this._state[i] = new Word64(0, 0);\n      }\n    }\n    \n    this._blockSize = (1600 - 2*this._outputLength) / 32;\n  }\n  \n  protected _doReset() {\n    this._state = [];\n    for(let i=0;i<25;i++){\n      this._state[i] = new Word64(0, 0);\n    }\n    this._blockSize = (1600 - 2*this._outputLength) / 32;\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    // Shortcuts\n    const state = this._state;\n    const nBlockSizeLanes = this._blockSize / 2;\n  \n    // Absorb\n    for(let i = 0; i < nBlockSizeLanes; i++) {\n      // Shortcuts\n      let W2i  = words[offset + 2 * i];\n      let W2i1 = words[offset + 2 * i + 1];\n    \n      // Swap endian\n      W2i = (\n        (((W2i << 8)  | (W2i >>> 24)) & 0x00ff00ff) |\n        (((W2i << 24) | (W2i >>> 8))  & 0xff00ff00)\n      );\n      W2i1 = (\n        (((W2i1 << 8)  | (W2i1 >>> 24)) & 0x00ff00ff) |\n        (((W2i1 << 24) | (W2i1 >>> 8))  & 0xff00ff00)\n      );\n    \n      // Absorb message into state\n      state[i].high ^= W2i1;\n      state[i].low  ^= W2i;\n    }\n  \n    // Rounds\n    for (let round = 0; round < 24; round++) {\n      // Theta\n      for (let x = 0; x < 5; x++) {\n        // Mix column lanes\n        let tMsw = 0;\n        let tLsw = 0;\n        for (let y = 0; y < 5; y++) {\n          const l = state[x + 5 * y];\n          tMsw ^= l.high;\n          tLsw ^= l.low;\n        }\n      \n        // Temporary values\n        const Tx = T[x];\n        Tx.high = tMsw;\n        Tx.low  = tLsw;\n      }\n      for (let x = 0; x < 5; x++) {\n        // Shortcuts\n        const Tx4 = T[(x + 4) % 5];\n        const Tx1 = T[(x + 1) % 5];\n        const Tx1Msw = Tx1.high;\n        const Tx1Lsw = Tx1.low;\n      \n        // Mix surrounding columns\n        const tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n        const tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n        for (let y = 0; y < 5; y++) {\n          const l = state[x + 5 * y];\n          l.high ^= tMsw;\n          l.low  ^= tLsw;\n        }\n      }\n    \n      // Rho Pi\n      for (let laneIndex = 1; laneIndex < 25; laneIndex++) {\n        let tMsw: number;\n        let tLsw: number;\n      \n        // Shortcuts\n        const laneMsw = state[laneIndex].high;\n        const laneLsw = state[laneIndex].low;\n        const rhoOffset = RHO_OFFSETS[laneIndex];\n      \n        // Rotate lanes\n        if (rhoOffset < 32) {\n          tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n          tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n        } else /* if (rhoOffset >= 32) */ {\n          tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n          tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n        }\n      \n        // Transpose lanes\n        const TPiLane = T[PI_INDEXES[laneIndex]];\n        TPiLane.high = tMsw;\n        TPiLane.low  = tLsw;\n      }\n    \n      // Rho pi at x = y = 0\n      const T0 = T[0];\n      const state0 = state[0];\n      T0.high = state0.high;\n      T0.low  = state0.low;\n    \n      // Chi\n      for (let x = 0; x < 5; x++) {\n        for (let y = 0; y < 5; y++) {\n          // Shortcuts\n          const laneIndex = x + 5 * y;\n          const l = state[laneIndex];\n          const TLane = T[laneIndex];\n          const Tx1Lane = T[((x + 1) % 5) + 5 * y];\n          const Tx2Lane = T[((x + 2) % 5) + 5 * y];\n        \n          // Mix rows\n          l.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n          l.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n        }\n      }\n    \n      // Iota\n      const lane = state[0];\n      const roundConstant = ROUND_CONSTANTS[round];\n      lane.high ^= roundConstant.high;\n      lane.low  ^= roundConstant.low;\n    }\n  }\n  \n  protected _doFinalize(): Word32Array {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsLeft = data.nSigBytes * 8;\n    const blockSizeBits = this.blockSize * 32;\n  \n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n    dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n    data.nSigBytes = dataWords.length * 4;\n  \n    // Hash final blocks\n    this._process();\n  \n    // Shortcuts\n    const state = this._state;\n    const outputLengthBytes = this._outputLength / 8;\n    const outputLengthLanes = outputLengthBytes / 8;\n  \n    // Squeeze\n    const hashWords = [];\n    for (let i = 0; i < outputLengthLanes; i++) {\n      // Shortcuts\n      const lane = state[i];\n      let laneMsw = lane.high;\n      let laneLsw = lane.low;\n    \n      // Swap endian\n      laneMsw = (\n        (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n        (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n      );\n      laneLsw = (\n        (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n        (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n      );\n    \n      // Squeeze state to retrieve hash\n      hashWords.push(laneLsw);\n      hashWords.push(laneMsw);\n    }\n  \n    // Return final computed hash\n    return new Word32Array(hashWords, outputLengthBytes);\n  }\n  \n  public clone(){\n    const props = {\n      outputLength: this._outputLength,\n      state: this._state,\n      blockSize: this._blockSize,\n      data: this._data,\n      nBytes: this._nBytes,\n    };\n    return new SHA3(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA3Props){\n    return new SHA3(props).finalize(message);\n  }\n}","import {Word64, Word64Array} from \"./lib/Word64Array\";\nimport {SHA512} from \"./SHA512\";\nimport type {HasherProps} from \"./lib/algorithm/Hasher\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport interface SHA384Props extends HasherProps {\n  hash: Word64Array;\n}\n\nexport class SHA384 extends SHA512 {\n  protected _props?: Partial<SHA384Props>;\n  protected _hash: Word64Array = new Word64Array([\n    new Word64(0xcbbb9d5d, 0xc1059ed8), new Word64(0x629a292a, 0x367cd507),\n    new Word64(0x9159015a, 0x3070dd17), new Word64(0x152fecd8, 0xf70e5939),\n    new Word64(0x67332667, 0xffc00b31), new Word64(0x8eb44a87, 0x68581511),\n    new Word64(0xdb0c2e0d, 0x64f98fa7), new Word64(0x47b5481d, 0xbefa4fa4)\n  ]);\n  \n  public constructor(props?: Partial<SHA384Props>) {\n    super(props);\n    this._props = props;\n    if(props && typeof props.hash !== \"undefined\"){\n      this._hash = props.hash.clone();\n    }\n  }\n  \n  protected _doReset() {\n    this._hash = new Word64Array([\n      new Word64(0xcbbb9d5d, 0xc1059ed8), new Word64(0x629a292a, 0x367cd507),\n      new Word64(0x9159015a, 0x3070dd17), new Word64(0x152fecd8, 0xf70e5939),\n      new Word64(0x67332667, 0xffc00b31), new Word64(0x8eb44a87, 0x68581511),\n      new Word64(0xdb0c2e0d, 0x64f98fa7), new Word64(0x47b5481d, 0xbefa4fa4)\n    ]);\n  }\n  \n  protected _doFinalize(): Word32Array {\n    const hash = super._doFinalize.call(this);\n    hash.nSigBytes -= 16;\n    return hash;\n  }\n  \n  public clone(){\n    const props = {hash: this._hash, blockSize: this._blockSize, data: this._data, nBytes: this._nBytes};\n    return new SHA384(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA384Props){\n    return new SHA384(props).finalize(message);\n  }\n}\n","import {Hasher, HasherProps} from \"./lib/algorithm/Hasher\";\nimport {Word64, Word64Array} from \"./lib/Word64Array\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport interface SHA512Props extends HasherProps {\n  hash: Word64Array;\n}\n\nconst K = [\n  new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd),\n  new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc),\n  new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019),\n  new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118),\n  new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe),\n  new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2),\n  new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1),\n  new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694),\n  new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3),\n  new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65),\n  new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483),\n  new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5),\n  new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210),\n  new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4),\n  new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725),\n  new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70),\n  new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926),\n  new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df),\n  new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8),\n  new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b),\n  new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001),\n  new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30),\n  new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910),\n  new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8),\n  new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53),\n  new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8),\n  new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb),\n  new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3),\n  new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60),\n  new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec),\n  new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9),\n  new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b),\n  new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207),\n  new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178),\n  new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6),\n  new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b),\n  new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493),\n  new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c),\n  new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a),\n  new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817),\n];\n\nconst W: Word64[] = [];\n\n(function computeConstants(){\n  for(let i=0;i<80;i++){\n    W[i] = new Word64(0, 0);\n  }\n})();\n\nexport class SHA512 extends Hasher {\n  protected _props?: Partial<SHA512Props>;\n  protected _blockSize = 1024/32;\n  protected _hash: Word64Array = new Word64Array([\n    new Word64(0x6a09e667, 0xf3bcc908), new Word64(0xbb67ae85, 0x84caa73b),\n    new Word64(0x3c6ef372, 0xfe94f82b), new Word64(0xa54ff53a, 0x5f1d36f1),\n    new Word64(0x510e527f, 0xade682d1), new Word64(0x9b05688c, 0x2b3e6c1f),\n    new Word64(0x1f83d9ab, 0xfb41bd6b), new Word64(0x5be0cd19, 0x137e2179)\n  ]);\n  \n  public constructor(props?: Partial<SHA512Props>) {\n    super(props);\n    this._props = props;\n    if(props && typeof props.hash !== \"undefined\"){\n      this._hash = props.hash.clone();\n    }\n  }\n  \n  protected _doReset() {\n    this._hash = new Word64Array([\n      new Word64(0x6a09e667, 0xf3bcc908), new Word64(0xbb67ae85, 0x84caa73b),\n      new Word64(0x3c6ef372, 0xfe94f82b), new Word64(0xa54ff53a, 0x5f1d36f1),\n      new Word64(0x510e527f, 0xade682d1), new Word64(0x9b05688c, 0x2b3e6c1f),\n      new Word64(0x1f83d9ab, 0xfb41bd6b), new Word64(0x5be0cd19, 0x137e2179)\n    ]);\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    // Shortcuts\n    const H = this._hash.words;\n  \n    const H0 = H[0];\n    const H1 = H[1];\n    const H2 = H[2];\n    const H3 = H[3];\n    const H4 = H[4];\n    const H5 = H[5];\n    const H6 = H[6];\n    const H7 = H[7];\n  \n    const H0h = H0.high;\n    let H0l = H0.low;\n    const H1h = H1.high;\n    let H1l = H1.low;\n    const H2h = H2.high;\n    let H2l = H2.low;\n    const H3h = H3.high;\n    let H3l = H3.low;\n    const H4h = H4.high;\n    let H4l = H4.low;\n    const H5h = H5.high;\n    let H5l = H5.low;\n    const H6h = H6.high;\n    let H6l = H6.low;\n    const H7h = H7.high;\n    let H7l = H7.low;\n  \n    // Working variables\n    let ah = H0h;\n    let al = H0l;\n    let bh = H1h;\n    let bl = H1l;\n    let ch = H2h;\n    let cl = H2l;\n    let dh = H3h;\n    let dl = H3l;\n    let eh = H4h;\n    let el = H4l;\n    let fh = H5h;\n    let fl = H5l;\n    let gh = H6h;\n    let gl = H6l;\n    let hh = H7h;\n    let hl = H7l;\n  \n    // Rounds\n    for (let i=0;i<80;i++) {\n      let Wil: number;\n      let Wih: number;\n      \n      // Shortcut\n      const Wi = W[i];\n    \n      // Extend message\n      if (i < 16) {\n        Wih = Wi.high = words[offset + i * 2]    | 0;\n        Wil = Wi.low = words[offset + i * 2 + 1] | 0;\n      }\n      else {\n        // Gamma0\n        const gamma0x  = W[i - 15];\n        const gamma0xh = gamma0x.high;\n        const gamma0xl = gamma0x.low;\n        const gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31))\n          ^ ((gamma0xh >>> 8) | (gamma0xl << 24))\n          ^ (gamma0xh >>> 7);\n        const gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31))\n          ^ ((gamma0xl >>> 8) | (gamma0xh << 24))\n          ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n      \n        // Gamma1\n        const gamma1x  = W[i - 2];\n        const gamma1xh = gamma1x.high;\n        const gamma1xl = gamma1x.low;\n        const gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13))\n          ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n        const gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13))\n          ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n      \n        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n        const Wi7  = W[i - 7];\n        const Wi7h = Wi7.high;\n        const Wi7l = Wi7.low;\n      \n        const Wi16  = W[i - 16];\n        const Wi16h = Wi16.high;\n        const Wi16l = Wi16.low;\n      \n        Wil = gamma0l + Wi7l;\n        Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n        Wil = Wil + gamma1l;\n        Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n        Wil = Wil + Wi16l;\n        Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n      \n        Wi.high = Wih;\n        Wi.low = Wil;\n      }\n    \n      const chh  = (eh & fh) ^ (~eh & gh);\n      const chl  = (el & fl) ^ (~el & gl);\n      const majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n      const majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n    \n      const sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n      const sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n      const sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n      const sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n    \n      // t1 = h + sigma1 + ch + K[i] + W[i]\n      const Ki  = K[i];\n      const Kih = Ki.high;\n      const Kil = Ki.low;\n    \n      let t1l = hl + sigma1l;\n      let t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n      t1l = t1l + chl;\n      t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n      t1l = t1l + Kil;\n      t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n      t1l = t1l + Wil;\n      t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n    \n      // t2 = sigma0 + maj\n      const t2l = sigma0l + majl;\n      const t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n    \n      // Update working variables\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = (dl + t1l) | 0;\n      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = (t1l + t2l) | 0;\n      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n    }\n  \n    // Intermediate hash value\n    H0l = H0.low  = (H0l + al);\n    H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n    H1l = H1.low  = (H1l + bl);\n    H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n    H2l = H2.low  = (H2l + cl);\n    H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n    H3l = H3.low  = (H3l + dl);\n    H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n    H4l = H4.low  = (H4l + el);\n    H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n    H5l = H5.low  = (H5l + fl);\n    H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n    H6l = H6.low  = (H6l + gl);\n    H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n    H7l = H7.low  = (H7l + hl);\n    H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n  }\n  \n  protected _doFinalize(): Word32Array {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n  \n    const nBitsTotal = this._nBytes * 8;\n    const nBitsLeft = data.nSigBytes * 8;\n  \n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n    dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n    data.nSigBytes = dataWords.length * 4;\n  \n    // Hash final blocks\n    this._process();\n  \n    // Convert hash to 32-bit word array before returning\n    return this._hash.to32();\n  }\n  \n  public clone(){\n    const props = {hash: this._hash, blockSize: this._blockSize, data: this._data, nBytes: this._nBytes};\n    return new SHA512(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA512Props){\n    return new SHA512(props).finalize(message);\n  }\n}\n","export {Hmac} from \"./Hmac\";\nexport {HmacMD5} from \"./HmacMD5\";\nexport {HmacSHA224} from \"./HmacSHA224\";\nexport {HmacSHA256} from \"./HmacSHA256\";\nexport {HmacSHA384} from \"./HmacSHA384\";\nexport {HmacSHA512} from \"./HmacSHA512\";\nexport {MD5} from \"./MD5\";\nexport {SHA1} from \"./SHA1\";\nexport {SHA224} from \"./SHA224\";\nexport {SHA256} from \"./SHA256\";\nexport {SHA384} from \"./SHA384\";\nexport {SHA512} from \"./SHA512\";\nexport {SHA3} from \"./SHA3\";\nexport {AES} from \"./AES\";\n\nimport {CBC} from \"./mode/CBC\";\nimport {CFB} from \"./mode/CFB\";\nimport {CTR} from \"./mode/CTR\";\nimport {ECB} from \"./mode/ECB\";\nimport {OFB} from \"./mode/OFB\";\nexport const mode = {\n  CBC,\n  CFB,\n  CTR,\n  ECB,\n  OFB,\n};\n\nimport {AnsiX923} from \"./pad/AnsiX923\";\nimport {ISO10126} from \"./pad/ISO10126\";\nimport {ISO97971} from \"./pad/ISO97971\";\nimport {Noop} from \"./pad/Noop\";\nimport {Zero} from \"./pad/Zero\";\nexport const pad = {\n  AnsiX923,\n  ISO10126,\n  ISO97971,\n  Noop,\n  Zero,\n};\n","import type {IEncoder} from \"./type\";\nimport {Hex} from \"./encoder/Hex\";\nimport {random} from \"./random\";\n\n/**\n * An array of 32bit words\n */\nexport class Word32Array {\n  private readonly _words: number[];\n  private _nSignificantBytes: number;\n  \n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} nSignificantBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *   var wordArray = new WordArray();\n   *   var wordArray = new WordArray([0x00010203, 0x04050607]);\n   *   var wordArray = new WordArray([0x00010203, 0x04050607], 6);\n   */\n  public constructor(words?: number[], nSignificantBytes?: number) {\n    this._words = words || [];\n    this._nSignificantBytes = typeof nSignificantBytes === \"number\" ? nSignificantBytes : this._words.length * 4;\n  }\n  \n  public get nSigBytes(){\n    return this._nSignificantBytes;\n  }\n  \n  /**\n   * Set significant bytes\n   * @param {number} n - significant bytes\n   */\n  public set nSigBytes(n: number){\n    this._nSignificantBytes = n;\n  }\n  \n  /**\n   * Get raw reference of internal words.\n   * Modification of this raw array will affect internal words.\n   */\n  public get words(){\n    return this._words;\n  }\n  \n  /**\n   * Converts this word array to a string.\n   *\n   * @param {IEncoder?} encoder The encoding strategy to use. Default: CryptoJS.enc.Hex\n   * @return {string} The stringified word array.\n   * @example\n   *   var string = wordArray + '';\n   *   var string = wordArray.toString();\n   *   var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n  public toString(encoder?: IEncoder){\n    if(!encoder){\n      return Hex.stringify(this);\n    }\n    return encoder.stringify(this);\n  }\n  \n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {Word32Array} w The word array to append.\n   * @return {Word32Array} This word array.\n   * @example\n   *   wordArray1.concat(wordArray2);\n   */\n  public concat(w: Word32Array){\n    const words = w.words.slice();\n    const N = w.nSigBytes;\n    \n    this.clamp();\n  \n    if(this._nSignificantBytes % 4){\n      // Copy one byte at a time\n      for(let i=0;i<N;i++){\n        const b = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        this._words[(this._nSignificantBytes + i) >>> 2] |= b << (24 - ((this._nSignificantBytes + i) % 4) * 8);\n      }\n    }\n    else {\n      // Copy one word at a time\n      for(let i=0;i<N;i+=4) {\n        this._words[(this._nSignificantBytes + i) >>> 2] = words[i >>> 2];\n      }\n    }\n    \n    this._nSignificantBytes += N;\n  \n    // Chainable\n    return this;\n  }\n  \n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *   wordArray.clamp();\n   */\n  public clamp(){\n    const n = this._nSignificantBytes;\n    this._words[n >>> 2] &= 0xffffffff << (32 - (n % 4) * 8);\n    this._words.length = Math.ceil(n / 4);\n  }\n  \n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {Word32Array} The clone.\n   * @example\n   *   var clone = wordArray.clone();\n   */\n  public clone(){\n    return new Word32Array(this._words.slice(), this._nSignificantBytes);\n  }\n  \n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   * @return {Word32Array} The random word array.\n   * @static\n   * @example\n   *   var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n  public static random(nBytes: number){\n    const words: number[] = [];\n    \n    for(let i=0;i<nBytes;i++){\n      words.push(random());\n    }\n    \n    return new Word32Array(words, nBytes);\n  }\n}\n","import type {IEncoder} from \"./type\";\nimport {Hex} from \"./encoder/Hex\";\nimport {Word32Array} from \"./Word32Array\";\n\nexport class Word64 {\n  public high: number;\n  public low: number;\n  \n  public constructor(high: number, low: number) {\n    this.high = high;\n    this.low = low;\n  }\n  \n  public clone(){\n    return new Word64(this.high, this.low);\n  }\n}\n\n/**\n * An array of 64bit words\n */\nexport class Word64Array {\n  private readonly _words: Word64[];\n  private _nSignificantBytes: number;\n  \n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} nSignificantBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *   var wordArray = new WordArray();\n   *   var wordArray = new WordArray([0x00010203, 0x04050607]);\n   *   var wordArray = new WordArray([0x00010203, 0x04050607], 6);\n   */\n  public constructor(words?: Word64[], nSignificantBytes?: number) {\n    this._words = words || [];\n    this._nSignificantBytes = typeof nSignificantBytes === \"number\" ? nSignificantBytes : this._words.length * 8;\n  }\n  \n  public get nSigBytes(){\n    return this._nSignificantBytes;\n  }\n  \n  /**\n   * Set significant bytes\n   * @param {number} n - significant bytes\n   */\n  public set nSigBytes(n: number){\n    this._nSignificantBytes = n;\n  }\n  \n  /**\n   * Get raw reference of internal words.\n   * Modification of this raw array will affect internal words.\n   */\n  public get words(){\n    return this._words;\n  }\n  \n  /**\n   * Converts this 64-bit word array to a 32-bit word array.\n   *\n   * @return {Word32Array} This word array's data as a 32-bit word array.\n   *\n   * @example\n   *\n   *     var x32WordArray = x64WordArray.toX32();\n   */\n  public to32(){\n    const words32: number[] = [];\n    for(let i=0;i<this._words.length;i++){\n      const word64 = this._words[i];\n      words32.push(word64.high);\n      words32.push(word64.low);\n    }\n    return new Word32Array(words32, this._nSignificantBytes);\n  }\n  \n  /**\n   * Converts this word array to a string.\n   *\n   * @param {IEncoder?} encoder The encoding strategy to use. Default: CryptoJS.enc.Hex\n   * @return {string} The stringified word array.\n   * @example\n   *   var string = wordArray + '';\n   *   var string = wordArray.toString();\n   *   var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n  public toString(encoder?: IEncoder){\n    if(!encoder){\n      return Hex.stringify(this.to32());\n    }\n    return encoder.stringify(this.to32());\n  }\n  \n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {Word64Array} The clone.\n   * @example\n   *   var clone = wordArray.clone();\n   */\n  public clone(){\n    const words = this._words.slice();\n    for(let i=0;i<words.length;i++){\n      words[i] = words[i].clone();\n    }\n    return new Word64Array(words, this._nSignificantBytes);\n  }\n}\n","import {Word32Array} from \"../Word32Array\";\nimport {Utf8} from \"../encoder/Utf8\";\n\nexport interface BufferedBlockAlgorithmProps {\n  data: Word32Array;\n  nBytes: number;\n}\n\nexport class BufferedBlockAlgorithm {\n  protected _props?: Partial<BufferedBlockAlgorithmProps>;\n  protected _data: Word32Array;\n  protected _nBytes: number;\n  protected _minBufferSize: number = 0;\n  protected _blockSize: number = 0;\n  \n  public constructor(props?: Partial<BufferedBlockAlgorithmProps>) {\n    this._props = props;\n    this._data = props && typeof props.data !== \"undefined\" ? props.data.clone() : new Word32Array();\n    this._nBytes = props && typeof props.nBytes === \"number\" ? props.nBytes : 0;\n  }\n  \n  public get blockSize(){\n    return this._blockSize;\n  }\n  \n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *   bufferedBlockAlgorithm.reset();\n   */\n  public reset(data?: Word32Array, nBytes?: number){\n    this._data = typeof data !== \"undefined\" ? data.clone() : new Word32Array();\n    this._nBytes = typeof nBytes === \"number\" ? nBytes : 0;\n  }\n  \n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {Word32Array|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n   * @example\n   *   bufferedBlockAlgorithm.append('data');\n   *   bufferedBlockAlgorithm.append(wordArray);\n   */\n  protected _append(data: Word32Array|string){\n    const d = typeof data === \"string\" ? Utf8.parse(data) : data;\n    this._data.concat(d);\n    this._nBytes += d.nSigBytes;\n  }\n  \n  /**\n   * Processes available data blocks.\n   * This method invokes doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean?} doFlush Whether all blocks and partial blocks should be processed.\n   * @return {Word32Array} The processed data.\n   * @example\n   *   var processedData = bufferedBlockAlgorithm.process();\n   *   var processedData = bufferedBlockAlgorithm.process(!!'flush');\n   */\n  protected _process(doFlush?: boolean){\n    let processedWords: number[]|undefined;\n    const words = this._data.words;\n    const nSigBytes = this._data.nSigBytes;\n    const blockSize = this._blockSize;\n    const blockSizeByte = this._blockSize * 4;\n    \n    let nBlocksReady = nSigBytes / blockSizeByte;\n    if(doFlush){\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    }\n    else{\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n    \n    // Count words ready\n    const nWordsReady = nBlocksReady * blockSize;\n    \n    // Count bytes ready\n    const nBytesReady = Math.min(nWordsReady * 4, nSigBytes);\n    \n    // Process blocks\n    if(nWordsReady){\n      for(let offset=0;offset<nWordsReady;offset+=blockSize){\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(words, offset);\n      }\n      \n      // Remove processed words\n      processedWords = words.splice(0, nWordsReady);\n      this._data.nSigBytes -= nBytesReady;\n    }\n    \n    // Return processed words\n    return new Word32Array(processedWords, nBytesReady);\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doProcessBlock(words: number[], offset: number): void {\n    throw new Error(\"Not implemented\")\n  }\n}\n","import {BufferedBlockAlgorithm, BufferedBlockAlgorithmProps} from \"./BufferedBlockAlgorithm\";\nimport type {Word32Array} from \"../Word32Array\";\n\nexport interface HasherProps extends BufferedBlockAlgorithmProps {\n  blockSize: number;\n}\n\nexport class Hasher extends BufferedBlockAlgorithm {\n  protected _props?: Partial<HasherProps>;\n  protected _blockSize: number = 512/32;\n  \n  public constructor(props?: Partial<HasherProps>){\n    super(props);\n    this._props = props;\n    if(props && typeof props.blockSize === \"number\"){\n      this._blockSize = props.blockSize;\n    }\n    this.reset(props ? props.data : undefined, props ? props.nBytes : undefined);\n  }\n  \n  public get blockSize(){\n    return this._blockSize;\n  }\n  \n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *   hasher.reset();\n   */\n  public reset(data?: Word32Array, nBytes?: number){\n    // Reset data buffer\n    super.reset.call(this, data, nBytes);\n    // Perform concrete-hasher logic\n    this._doReset();\n  }\n  \n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {Word32Array|string} messageUpdate The message to append.\n   * @return {Hasher} This hasher.\n   * @example\n   *   hasher.update('message');\n   *   hasher.update(wordArray);\n   */\n  public update(messageUpdate: Word32Array|string){\n    this._append(messageUpdate);\n    this._process();\n    return this;\n  }\n  \n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {Word32Array|string?} messageUpdate (Optional) A final message update.\n   * @return {Word32Array} The hash.\n   * @example\n   *   var hash = hasher.finalize();\n   *   var hash = hasher.finalize('message');\n   *   var hash = hasher.finalize(wordArray);\n   */\n  public finalize(messageUpdate?: Word32Array|string){\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    }\n  \n    // Perform concrete-hasher logic\n    return this._doFinalize();\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doReset(): void {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doFinalize(): Word32Array {\n    throw new Error(\"Not implemented\");\n  }\n}\n","import {Cipher, CipherProps, PropsWithKey} from \"./Cipher\";\nimport type {BlockCipherMode, BlockCipherModeProps} from \"./mode/BlockCipherMode\";\nimport type {Pad} from \"./pad/type\";\nimport {CBC} from \"./mode/CBC\";\nimport {Pkcs7} from \"./pad/Pkcs7\";\nimport type {Word32Array} from \"../../Word32Array\";\n\nexport interface BlockCipherProps extends CipherProps {\n  mode: typeof BlockCipherMode;\n  padding: Pad;\n}\n\nexport class BlockCipher extends Cipher {\n  protected _props: PropsWithKey<BlockCipherProps>;\n  protected _blockSize = 128/32;\n  protected _Mode: typeof BlockCipherMode = CBC;\n  protected _mode?: BlockCipherMode;\n  protected _padding: Pad = Pkcs7;\n  protected _modeCreator?: (props: BlockCipherModeProps) => BlockCipherMode;\n  \n  /**\n   * @see https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   */\n  [\"constructor\"]!: typeof BlockCipher;\n  \n  public constructor(props: PropsWithKey<BlockCipherProps>) {\n    super(props);\n    this._props = props;\n  \n    this._Mode = typeof props.mode !== \"undefined\" ? props.mode : this._Mode;\n    this._padding = typeof props.padding !== \"undefined\" ? props.padding : this._padding;\n  \n    this.reset(props?.data, props?.nBytes);\n  }\n  \n  public get iv(){\n    return this._iv;\n  }\n  \n  public get mode(){\n    return this._mode;\n  }\n  \n  public get padding(){\n    return this._padding;\n  }\n  \n  reset(data?: Word32Array, nBytes?: number) {\n    super.reset(data, nBytes);\n    \n    let modeCreator: (props: BlockCipherModeProps) => BlockCipherMode;\n    if(this._transformMode === Cipher.ENC_TRANSFORM_MODE){\n      modeCreator = this._Mode.createEncryptor;\n    }\n    else{\n      modeCreator = this._Mode.createDecryptor;\n      // Keep at least one block in the buffer for unpadding\n      this._minBufferSize = 1;\n    }\n    \n    if(this._Mode && this._modeCreator=== modeCreator){\n      this._mode = new this._Mode({cipher: this, iv: this._iv && this._iv.words});\n    }\n    else{\n      this._mode = modeCreator.call(this._Mode, {cipher: this, iv: this._iv && this._iv.words});\n      this._modeCreator = modeCreator;\n    }\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    this._mode?.processBlock(words, offset);\n  }\n  \n  protected _doFinalize(): Word32Array {\n    let finalProcessedBlocks: Word32Array;\n  \n    // Shortcut\n    const padding = this._padding;\n  \n    // Finalize\n    if (this._transformMode === Cipher.ENC_TRANSFORM_MODE) {\n      // Pad data\n      padding.pad(this._data, this.blockSize);\n    \n      // Process final blocks\n      finalProcessedBlocks = this._process(true);\n    }\n    else /* if (this._transformMode == Cipher._DEC_TRANSFORM_MODE) */ {\n      // Process final blocks\n      finalProcessedBlocks = this._process(true);\n    \n      // Unpad data\n      padding.unpad(finalProcessedBlocks);\n    }\n  \n    return finalProcessedBlocks;\n  }\n  \n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *     var cipher = JsCrypto.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createEncryptor(key: Word32Array, props?: Partial<BlockCipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new BlockCipher({...props, key, transformMode: Cipher.ENC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Creates this cipher in decryption mode.\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = JsCrypto.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createDecryptor(key: Word32Array, props?: Partial<BlockCipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new BlockCipher({...props, key, transformMode: Cipher.DEC_TRANSFORM_MODE});\n  }\n}\n","import {BufferedBlockAlgorithm, BufferedBlockAlgorithmProps} from \"../BufferedBlockAlgorithm\";\nimport type {Word32Array} from \"../../Word32Array\";\n\nexport interface CipherProps extends BufferedBlockAlgorithmProps {\n  key: Word32Array;\n  iv: Word32Array;\n  transformMode: number;\n}\n\nexport type PropsWithKey<T extends CipherProps> = Partial<T> & Pick<T, \"key\">;\n\nexport class Cipher extends BufferedBlockAlgorithm {\n  public static readonly ENC_TRANSFORM_MODE = 1;\n  public static readonly DEC_TRANSFORM_MODE = 2;\n  public static readonly keySize = 128/32;\n  public static readonly ivSize = 128/32;\n  \n  protected _props: PropsWithKey<CipherProps>;\n  protected _transformMode: number = 1;\n  protected _key: Word32Array;\n  protected _iv?: Word32Array;\n  \n  public constructor(props: PropsWithKey<CipherProps>) {\n    super(props);\n    this._props = props;\n  \n    this._key = props.key;\n    this._iv = typeof props.iv !== \"undefined\" ? props.iv : this._iv;\n    this._transformMode = typeof props.transformMode !== \"undefined\" ? props.transformMode : this._transformMode;\n  }\n  \n  /**\n   * Resets this cipher to its initial state.\n   * @example\n   *   cipher.reset();\n   */\n  public reset(data?: Word32Array, nBytes?: number) {\n    super.reset(data, nBytes);\n    this._doReset();\n  }\n  \n  /**\n   * Adds data to be encrypted or decrypted.\n   * @param {Word32Array|string} dataUpdate The data to encrypt or decrypt.\n   * @return {Word32Array} The data after processing.\n   * @example\n   *   var encrypted = cipher.process('data');\n   *   var encrypted = cipher.process(wordArray);\n   */\n  public process(dataUpdate: Word32Array|string){\n    this._append(dataUpdate);\n    return this._process();\n  }\n  \n  /**\n   * Finalizes the encryption or decryption process.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   * @param {Word32Array|string} dataUpdate The final data to encrypt or decrypt.\n   * @return {Word32Array} The data after final processing.\n   * @example\n   *   var encrypted = cipher.finalize();\n   *   var encrypted = cipher.finalize('data');\n   *   var encrypted = cipher.finalize(wordArray);\n   */\n  public finalize(dataUpdate: Word32Array|string){\n    // Final data update\n    if (dataUpdate) {\n      this._append(dataUpdate);\n    }\n  \n    // Perform concrete-cipher logic\n    return this._doFinalize();\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doReset(): void {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doProcess(): void {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doProcessBlock(words: number[], offset: number): void {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doFinalize(): Word32Array {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * @abstract\n   */\n  public encryptBlock(words: number[], offset: number): void {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * @abstract\n   */\n  public decryptBlock(words: number[], offset: number): void {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createEncryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new Cipher({...props, key, transformMode: Cipher.ENC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Creates this cipher in decryption mode.\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createDecryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new Cipher({...props, key, transformMode: Cipher.DEC_TRANSFORM_MODE});\n  }\n}\n","import type {Word32Array} from \"../../Word32Array\";\nimport type {BlockCipherMode} from \"./mode/BlockCipherMode\";\nimport type {Pad} from \"./pad/type\";\nimport type {Formatter} from \"./formatter/type\";\nimport {OpenSSLFormatter} from \"./formatter/OpenSSLFormatter\";\nimport type {BlockCipher} from \"./BlockCipher\";\n\n/**\n * A collection of cipher parameters.\n *\n * @property {Word32Array} ciphertext The raw ciphertext.\n * @property {Word32Array} key The key to this ciphertext.\n * @property {Word32Array} iv The IV used in the ciphering operation.\n * @property {Word32Array} salt The salt used with a key derivation function.\n * @property {typeof BlockCipher} algorithm The cipher algorithm.\n * @property {BlockCipherMode} mode The block mode used in the ciphering operation.\n * @property {Pad} padding The padding scheme used in the ciphering operation.\n * @property {number} blockSize The block size of the cipher.\n * @property {Formatter} formatter The default formatting strategy to convert this cipher params object to a string.\n */\nexport class CipherParams {\n  public cipherText?: Word32Array;\n  public key?: Word32Array;\n  public iv?: Word32Array;\n  public salt?: Word32Array;\n  public Algorithm?: typeof BlockCipher;\n  public mode?: BlockCipherMode;\n  public padding?: Pad;\n  public blockSize?: number;\n  public formatter: Formatter = OpenSSLFormatter;\n  \n  /**\n   * Initializes a newly created cipher params object.\n   *\n   * @param {Partial<CipherParams>} cp An object with any of the possible cipher parameters.\n   * @example\n   *   var cipherParams = CryptoJS.lib.CipherParams.create({\n   *       ciphertext: ciphertextWordArray,\n   *       key: keyWordArray,\n   *       iv: ivWordArray,\n   *       salt: saltWordArray,\n   *       algorithm: JsCrypto.AES,\n   *       mode: JsCrypto.CBC,\n   *       padding: JsCrypto.PKCS7,\n   *       blockSize: 4,\n   *       formatter: JsCrypto.OpenSSLFormatter\n   *     });\n   */\n  public constructor(cp?: Partial<CipherParams>) {\n    if(cp){\n      this.cipherText = cp.cipherText;\n      this.key = cp.key;\n      this.iv = cp.iv;\n      this.salt = cp.salt;\n      this.Algorithm = cp.Algorithm;\n      this.mode = cp.mode;\n      this.padding = cp.padding;\n      this.blockSize = cp.blockSize;\n      this.formatter = cp.formatter || OpenSSLFormatter;\n    }\n  }\n  \n  /**\n   * Converts this cipher params object to a string.\n   *\n   * @param {Formatter?} formatter (Optional) The formatting strategy to use.\n   * @return {string} The stringified cipher params.\n   * @throws Error If neither the formatter nor the default formatter is set.\n   * @example\n   *   var string = cipherParams + '';\n   *   var string = cipherParams.toString();\n   *   var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n   */\n  public toString(formatter?: Formatter){\n    return (formatter || this.formatter).stringify(this);\n  }\n}","import {\n  ISerializableCipher,\n  parseCipherText,\n  SerializableCipher,\n  SerializableCipherProps,\n} from \"./SerializableCipher\";\nimport type {KDF as KDFType} from \"./kdf/type\";\nimport {OpenSSLKDF} from \"./kdf/OpenSSLKDF\";\nimport type {BlockCipher} from \"./BlockCipher\";\nimport type {Word32Array} from \"../../Word32Array\";\nimport type {CipherParams} from \"./CipherParams\";\nimport {OpenSSLFormatter} from \"./formatter/OpenSSLFormatter\";\n\nexport interface PasswordBasedCipherProps extends SerializableCipherProps {\n  KDF: KDFType;\n}\n\nexport const PasswordBasedCipher: ISerializableCipher<string> = {\n  /**\n   * Encrypts a message using a password.\n   *\n   * @param {typeof BlockCipher} Cipher The cipher algorithm to use.\n   * @param {Word32Array|string} message The message to encrypt.\n   * @param {string} password The password.\n   * @param {Partial<PasswordBasedCipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {CipherParams} A cipher params object.\n   * @example\n   *   var params = JsCrypto.PasswordBasedCipher.encrypt(JsCrypto.AES, message, 'password');\n   *   var params = JsCrypto.PasswordBasedCipher.encrypt(JsCrypto.AES, message, 'password', { format: JsCrypto.OpenSSLFormatter });\n   */\n  encrypt(\n    Cipher: typeof BlockCipher,\n    message: Word32Array|string,\n    password: string,\n    props?: Partial<PasswordBasedCipherProps>,\n  ){\n    const p = props ? {...props} : {};\n    const KDF = props && props.KDF ? props.KDF : OpenSSLKDF;\n    const derivedParams = KDF.execute(password, Cipher.keySize, Cipher.ivSize);\n    \n    p.iv = derivedParams.iv;\n    const cipherParams = SerializableCipher.encrypt(Cipher, message, derivedParams.key, p);\n    \n    return {\n      ...cipherParams,\n      ...derivedParams,\n    };\n  },\n  \n  /**\n   * Decrypts serialized ciphertext using a password.\n   *\n   * @param {typeof BlockCipher} Cipher The cipher algorithm to use.\n   * @param {CipherParams|string} cipherText The ciphertext to decrypt.\n   * @param {string} password The password.\n   * @param {Partial<PasswordBasedCipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Word32Array} The plaintext.\n   * @example\n   *   var plaintext = JsCrypto.PasswordBasedCipher.decrypt(\n   *     JsCrypto.AES,\n   *     formattedCiphertext,\n   *     'password',\n   *     { format: JsCrypto.OpenSSLFormatter }\n   *   );\n   *   var plaintext = JsCrypto.PasswordBasedCipher.decrypt(\n   *     JsCrypto.AES,\n   *     ciphertextParams,\n   *     'password',\n   *     { format: JsCrypto.OpenSSLFormatter }\n   *   );\n   */\n  decrypt(\n    Cipher: typeof BlockCipher,\n    cipherText: CipherParams|string,\n    password: string,\n    props?: Partial<PasswordBasedCipherProps>,\n  ){\n    const p = props ? {...props} : {};\n    const KDF = p.KDF ? p.KDF : OpenSSLKDF;\n    const formatter = p.formatter ? p.formatter : OpenSSLFormatter;\n    const cipherTextParams = parseCipherText(cipherText, formatter);\n    const derivedParams = KDF.execute(password, Cipher.keySize, Cipher.ivSize);\n    \n    p.iv = derivedParams.iv;\n    return SerializableCipher.decrypt(Cipher, cipherTextParams, derivedParams.key, props);\n  }\n}\n","import type {Formatter} from \"./formatter/type\";\nimport {OpenSSLFormatter} from \"./formatter/OpenSSLFormatter\";\nimport type {Word32Array} from \"../../Word32Array\";\nimport type {BlockCipher, BlockCipherProps} from \"./BlockCipher\";\nimport {CipherParams} from \"./CipherParams\";\n\nexport interface SerializableCipherProps extends BlockCipherProps {\n  formatter: Formatter;\n}\n\nexport interface ISerializableCipher<K extends Word32Array|string> {\n  encrypt: (\n    cipher: typeof BlockCipher,\n    message: Word32Array|string,\n    key: K,\n    props?: Partial<SerializableCipherProps>,\n  ) => CipherParams;\n  decrypt: (\n    cipher: typeof BlockCipher,\n    cipherText: CipherParams|string,\n    key: K,\n    props?: Partial<SerializableCipherProps>,\n  ) => Word32Array;\n}\n\n/**\n * Converts serialized ciphertext to CipherParams,\n * else assumed CipherParams already and returns ciphertext unchanged.\n * @param {CipherParams|string} cipherTextParams The ciphertext.\n * @param {Formatter} formatter The formatting strategy to use to parse serialized ciphertext.\n * @return {CipherParams} The un-serialized ciphertext.\n * @example\n *   var ciphertextParams = JsCrypto.SerializableCipher.parse(ciphertextStringOrParams, format);\n */\nexport function parseCipherText(cipherTextParams: CipherParams|string, formatter: Formatter){\n  if(typeof cipherTextParams === \"string\"){\n    return formatter.parse(cipherTextParams);\n  }\n  return cipherTextParams;\n}\n\nexport const SerializableCipher: ISerializableCipher<Word32Array> = {\n  /**\n   * Encrypts a message.\n   *\n   * @param {typeof BlockCipher} Cipher The cipher algorithm to use.\n   * @param {Word32Array|string} message The message to encrypt.\n   * @param {Word32Array} key The key.\n   * @param {Partial<SerializableCipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {CipherParams} A cipher params object.\n   * @example\n   *   var ciphertextParams = JsCrypto.SerializableCipher.encrypt(JsCrypto.AES, message, key);\n   *   var ciphertextParams = JsCrypto.SerializableCipher.encrypt(JsCrypto.AES, message, key, { iv: iv });\n   */\n  encrypt(\n    Cipher: typeof BlockCipher,\n    message: Word32Array|string,\n    key: Word32Array,\n    props?: Partial<SerializableCipherProps>,\n  ){\n    const encryptor = Cipher.createEncryptor(key, props);\n    const cipherText = encryptor.finalize(message);\n    \n    return new CipherParams({\n      cipherText,\n      key,\n      iv: encryptor.iv,\n      Algorithm: Cipher,\n      mode: encryptor.mode,\n      padding: encryptor.padding,\n      blockSize: encryptor.blockSize,\n      formatter: props?.formatter || OpenSSLFormatter,\n    });\n  },\n  \n  /**\n   * Decrypts serialized ciphertext.\n   *\n   * @param {typeof BlockCipher} Cipher The cipher algorithm to use.\n   * @param {CipherParams|string} cipherText The ciphertext to decrypt.\n   * @param {Word32Array} key The key.\n   * @param {Partial<SerializableCipherProps>} props (Optional) The configuration options to use for this operation.\n   * @return {Word32Array} The plaintext.\n   * @example\n   *     var plaintext = JsCrypto.SerializableCipher.decrypt(JsCrypto.AES, formattedCiphertext, key, { iv: iv, format: JsCrypto.OpenSSL });\n   *     var plaintext = JsCrypto.SerializableCipher.decrypt(JsCrypto.AES, ciphertextParams, key, { iv: iv, format: JsCrypto.OpenSSL });\n   */\n  decrypt(\n    Cipher: typeof BlockCipher,\n    cipherText: CipherParams|string,\n    key: Word32Array,\n    props?: Partial<SerializableCipherProps>,\n  ){\n    const decryptor = Cipher.createDecryptor(key, props);\n    const cipherParams = parseCipherText(cipherText, props?.formatter || OpenSSLFormatter);\n    return decryptor.finalize(cipherParams.cipherText || \"\");\n  }\n}\n","import type {Formatter} from \"./type\";\nimport {CipherParams} from \"../CipherParams\";\nimport {Word32Array} from \"../../../Word32Array\";\nimport {Base64} from \"../../../encoder/Base64\";\n\nexport const OpenSSLFormatter: Formatter = {\n  /**\n   * Converts a cipher params object to an OpenSSL-compatible string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   * @return {string} The OpenSSL-compatible string.\n   * @example\n   *   var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n   */\n  stringify(cipherParams: CipherParams){\n    // Shortcuts\n    const cipherText = cipherParams.cipherText;\n    const salt = cipherParams.salt;\n    \n    if(!cipherText){\n      return \"\";\n    }\n  \n    // Format\n    if (salt) {\n      const wordArray = new Word32Array([0x53616c74, 0x65645f5f]).concat(salt).concat(cipherText);\n      return wordArray.toString(Base64);\n    }\n    \n    return cipherText.toString(Base64);\n  },\n  \n  /**\n   * Converts an OpenSSL-compatible string to a cipher params object.\n   *\n   * @param {string} openSSLStr The OpenSSL-compatible string.\n   * @return {CipherParams} The cipher params object.\n   * @example\n   *   var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n   */\n  parse(openSSLStr: string){\n    let salt;\n  \n    // Parse base64\n    const cipherText = Base64.parse(openSSLStr);\n  \n    // Shortcut\n    const ciphertextWords = cipherText.words;\n  \n    // Test for salt\n    if (ciphertextWords[0] === 0x53616c74 && ciphertextWords[1] === 0x65645f5f) {\n      // Extract salt\n      salt = new Word32Array(ciphertextWords.slice(2, 4));\n    \n      // Remove salt from ciphertext\n      ciphertextWords.splice(0, 4);\n      cipherText.nSigBytes -= 16;\n    }\n  \n    return new CipherParams({cipherText, salt });\n  }\n}","import type {Hasher} from \"../../Hasher\";\nimport {MD5} from \"../../../../MD5\";\nimport {Word32Array} from \"../../../Word32Array\";\n\nexport interface EvpKDFProps {\n  keySize: number;\n  Hasher: typeof Hasher;\n  iterations: number;\n}\n\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * https://www.openssl.org/docs/man1.1.1/man3/EVP_BytesToKey.html\n *\n * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n * @property {number} iterations The number of iterations to perform. Default: 1\n */\nexport class EvpKDF {\n  protected _props?: Partial<EvpKDFProps>;\n  protected _keySize: number = 128/32;\n  protected _Hasher: typeof Hasher = MD5;\n  protected _iterations: number = 1;\n  \n  public constructor(props?: Partial<EvpKDFProps>) {\n    this._props = props;\n    \n    if(props){\n      this._keySize = typeof props.keySize !== \"undefined\" ? props.keySize : this._keySize;\n      this._Hasher = typeof props.Hasher !== \"undefined\" ? props.Hasher : this._Hasher;\n      this._iterations = typeof props.iterations !== \"undefined\" ? props.iterations : this._iterations;\n    }\n  }\n  \n  /**\n   * Derives a key from a password.\n   *\n   * @param {Word32Array|string} password The password.\n   * @param {Word32Array|string} salt A salt.\n   * @return {Word32Array} The derived key.\n   * @example\n   *   var key = kdf.compute(password, salt);\n   */\n  public compute(password: Word32Array|string, salt: Word32Array|string){\n    let block: Word32Array|undefined;\n  \n    // Init hasher\n    const hasher = new this._Hasher();\n  \n    // Initial values\n    const derivedKey = new Word32Array();\n  \n    // Shortcuts\n    const derivedKeyWords = derivedKey.words;\n    const keySize = this._keySize;\n    const iterations = this._iterations;\n  \n    // Generate key\n    while (derivedKeyWords.length < keySize) {\n      if (block) {\n        hasher.update(block);\n      }\n      block = hasher.update(password).finalize(salt);\n      hasher.reset();\n    \n      // Iterations\n      for (let i = 1; i < iterations; i++) {\n        block = hasher.finalize(block);\n        hasher.reset();\n      }\n    \n      derivedKey.concat(block);\n    }\n    derivedKey.nSigBytes = keySize * 4;\n  \n    return derivedKey;\n  }\n  \n  /**\n   * Derives a key from a password.\n   *\n   * @param {Word32Array|string} password The password.\n   * @param {Word32Array|string} salt A salt.\n   * @param {Partial<EvpKDFProps>?} props (Optional) The configuration options to use for this computation.\n   *\n   * @return {Word32Array} The derived key.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var key = CryptoJS.EvpKDF(password, salt);\n   *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n   *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n   */\n  public static getKey(password: Word32Array|string, salt: Word32Array|string, props?: Partial<EvpKDFProps>){\n    return new EvpKDF(props).compute(password, salt);\n  }\n}","import {Word32Array} from \"../../../Word32Array\";\nimport {CipherParams} from \"../CipherParams\";\nimport {EvpKDF} from \"./EvpKDF\";\nimport type {KDF, KDFParams} from \"./type\";\n\nexport const OpenSSLKDF: KDF = {\n  execute(password: Word32Array|string, keySize: number, ivSize: number, salt?: Word32Array) {\n    // Generate random salt\n    if (!salt) {\n      salt = Word32Array.random(64/8);\n    }\n  \n    // Derive key and IV\n    const key = EvpKDF.getKey(password, salt, { keySize: keySize + ivSize });\n  \n    // Separate key and IV\n    const iv = new Word32Array(key.words.slice(keySize), ivSize * 4);\n    key.nSigBytes = keySize * 4;\n  \n    // Return params\n    return new CipherParams({ key, iv, salt }) as KDFParams;\n  }\n};","import type {Cipher} from \"../Cipher\";\n\nexport interface BlockCipherModeProps {\n  cipher: Cipher;\n  iv: number[]|undefined;\n}\n\n/**\n * Abstract base block cipher mode template.\n * @abstract\n */\nexport class BlockCipherMode {\n  protected _props: BlockCipherModeProps;\n  protected _cipher: Cipher;\n  protected _iv?: number[];\n  \n  public constructor(props: BlockCipherModeProps) {\n    this._props = props;\n    this._cipher = props.cipher;\n    this._iv = props.iv;\n  }\n  \n  /**\n   * @abstract\n   */\n  public processBlock(words: number[], offset: number){\n    return;\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @abstract\n   * @example\n   *   var mode = JsCrypto.CBC.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps): BlockCipherMode {\n    throw new Error(\"Not implemented yet\");\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @abstract\n   * @example\n   *   var mode = JsCrypto.CBC.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps): BlockCipherMode {\n    throw new Error(\"Not implemented yet\");\n  }\n}\n","import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\n\nexport interface CBCProps extends BlockCipherModeProps {\n}\n\nexport class CBC extends BlockCipherMode {\n  protected _prevBlock: number[] = [];\n  /**\n   * CBC encryptor.\n   */\n  public static Encryptor: typeof CBC = class Encryptor extends CBC {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Shortcuts\n      const cipher = this._cipher;\n      const blockSize = cipher.blockSize;\n  \n      // XOR and encrypt\n      this.xorBlock(words, offset, blockSize);\n      cipher.encryptBlock(words, offset);\n  \n      // Remember this block to use with next block\n      this._prevBlock = words.slice(offset, offset + blockSize);\n    }\n  };\n  \n  /**\n   * CBC decryptor.\n   */\n  public static Decryptor: typeof CBC = class Decryptor extends CBC {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Shortcuts\n      const cipher = this._cipher;\n      const blockSize = cipher.blockSize;\n    \n      // Remember this block to use with next block\n      const thisBlock = words.slice(offset, offset + blockSize);\n    \n      // Decrypt and XOR\n      cipher.decryptBlock(words, offset);\n      this.xorBlock(words, offset, blockSize);\n    \n      // This block becomes the previous block\n      this._prevBlock = thisBlock;\n    }\n    \n  };\n  \n  public constructor(props: CBCProps) {\n    super(props);\n  }\n  \n  public xorBlock(words: number[], offset: number, blockSize: number){\n    let block: number[];\n  \n    // Shortcut\n    const iv = this._iv;\n  \n    // Choose mixing block\n    if (iv){\n      block = iv;\n    \n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n    else {\n      block = this._prevBlock;\n    }\n  \n    // XOR blocks\n    for (let i = 0; i < blockSize; i++) {\n      words[offset + i] ^= block[i];\n    }\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.CBC.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: CBCProps){\n    return new CBC.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.CBC.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: CBCProps){\n    return new CBC.Decryptor(props);\n  }\n}\n","import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\nimport {Cipher} from \"../Cipher\";\n\n/**\n * Cipher Feedback Block mode\n */\nexport class CFB extends BlockCipherMode {\n  protected _prevBlock: number[] = [];\n  \n  /**\n   * CFB encryptor.\n   */\n  public static Encryptor: typeof CFB = class Encryptor extends CFB {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      this.generateKeyStreamAndEncrypt(words, offset, this._cipher.blockSize, this._cipher);\n  \n      // Remember this block to use with next block\n      this._prevBlock = words.slice(offset, offset + this._cipher.blockSize);\n    }\n  };\n  \n  /**\n   * CFB decryptor.\n   */\n  public static Decryptor: typeof CFB = class Encryptor extends CFB {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Remember this block to use with next block\n      const thisBlock = words.slice(offset, offset + this._cipher.blockSize);\n  \n      this.generateKeyStreamAndEncrypt(words, offset, this._cipher.blockSize, this._cipher);\n  \n      // This block becomes the previous block\n      this._prevBlock = thisBlock;\n    }\n  };\n  \n  public constructor(props: BlockCipherModeProps) {\n    super(props);\n  }\n  \n  public generateKeyStreamAndEncrypt(words: number[], offset: number, blockSize: number, cipher: Cipher){\n    let keyStream;\n  \n    // Shortcut\n    const iv = this._iv;\n  \n    // Generate keyStream\n    if (iv) {\n      keyStream = iv.slice(0);\n    \n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n    else {\n      keyStream = this._prevBlock;\n    }\n    cipher.encryptBlock(keyStream, 0);\n  \n    // Encrypt\n    for (let i = 0; i < blockSize; i++) {\n      words[offset + i] ^= keyStream[i];\n    }\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.CFB.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps){\n    return new CFB.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.CFB.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps){\n    return new CFB.Decryptor(props);\n  }\n}","import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\n\n/**\n * Output Feedback Block mode\n */\nexport class CTR extends BlockCipherMode {\n  protected _counter: number[] = [];\n  \n  /**\n   * CTR encryptor.\n   */\n  public static Encryptor: typeof CTR = class Encryptor extends CTR {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Shortcuts\n      const cipher = this._cipher\n      const blockSize = cipher.blockSize;\n      const iv = this._iv;\n      let counter = this._counter;\n  \n      // Generate keyStream\n      if (iv) {\n        counter = this._counter = iv.slice(0);\n    \n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      }\n      const keyStream = counter.slice(0);\n      cipher.encryptBlock(keyStream, 0);\n  \n      // Increment counter\n      counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n  \n      // Encrypt\n      for (let i = 0; i < blockSize; i++) {\n        words[offset + i] ^= keyStream[i];\n      }\n    }\n  };\n  \n  /**\n   * CTR decryptor.\n   */\n  public static Decryptor: typeof CTR = CTR.Encryptor;\n  \n  public constructor(props: BlockCipherModeProps) {\n    super(props);\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.CTR.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps){\n    return new CTR.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.CTR.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps){\n    return new CTR.Decryptor(props);\n  }\n}","import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\n\n/**\n * Electronic Codebook block mode.\n */\nexport class ECB extends BlockCipherMode {\n  /**\n   * ECB encryptor.\n   */\n  public static Encryptor: typeof ECB = class Encryptor extends ECB {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      this._cipher.encryptBlock(words, offset);\n    }\n  };\n  \n  /**\n   * ECB decryptor.\n   */\n  public static Decryptor: typeof ECB = class Decryptor extends ECB {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      this._cipher.decryptBlock(words, offset);\n    }\n    \n  };\n  \n  public constructor(props: BlockCipherModeProps) {\n    super(props);\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.ECB.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps){\n    return new ECB.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.ECB.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps){\n    return new ECB.Decryptor(props);\n  }\n}","import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\n\n/**\n * Output Feedback Block mode\n */\nexport class OFB extends BlockCipherMode {\n  protected _keyStream: number[] = [];\n  \n  /**\n   * OFB encryptor.\n   */\n  public static Encryptor: typeof OFB = class Encryptor extends OFB {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Shortcuts\n      const cipher = this._cipher\n      const blockSize = cipher.blockSize;\n      const iv = this._iv;\n      let keyStream = this._keyStream;\n  \n      // Generate key stream\n      if (iv) {\n        keyStream = this._keyStream = iv.slice(0);\n    \n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      }\n      cipher.encryptBlock(keyStream, 0);\n  \n      // Encrypt\n      for (let i = 0; i < blockSize; i++) {\n        words[offset + i] ^= keyStream[i];\n      }\n    }\n  };\n  \n  /**\n   * OFB decryptor.\n   */\n  public static Decryptor: typeof OFB = OFB.Encryptor;\n  \n  public constructor(props: BlockCipherModeProps) {\n    super(props);\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.OFB.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps){\n    return new OFB.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = JsCrypto.OFB.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps){\n    return new OFB.Decryptor(props);\n  }\n}","import type {Word32Array} from \"../../../Word32Array\";\nimport type {Pad} from \"./type\";\n\n/**\n * ANSI X.923 padding strategy\n *\n * @param {Word32Array} data The data to pad.\n * @param {number} blockSize The multiple that the data should be padded to.\n * @example\n *   JsCrypto.pad.AnsiX923.pad(wordArray, 4);\n */\nfunction pad(data: Word32Array, blockSize: number){\n  // Shortcuts\n  const dataSigBytes = data.nSigBytes;\n  const blockSizeBytes = blockSize * 4;\n  \n  // Count padding bytes\n  const nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n  \n  // Compute last byte position\n  const lastBytePos = dataSigBytes + nPaddingBytes - 1;\n  \n  // Pad\n  data.clamp();\n  data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n  data.nSigBytes += nPaddingBytes;\n}\n\n/**\n * Unpads data that had been padded with ANSI X.923 padding strategy\n *\n * @param {Word32Array} data The data to unpad.\n * @example\n *   JsCrypto.pad.AnsiX923.unpad(wordArray);\n */\nfunction unpad(data: Word32Array){\n  // Get number of padding bytes from last byte\n  const nPaddingBytes = data.words[(data.nSigBytes - 1) >>> 2] & 0xff;\n  \n  // Remove padding\n  data.nSigBytes -= nPaddingBytes;\n}\n\nexport const AnsiX923: Pad = {\n  pad,\n  unpad,\n};\n","import {Word32Array} from \"../../../Word32Array\";\nimport type {Pad} from \"./type\";\n\n/**\n * ISO10126 padding strategy\n *\n * @param {Word32Array} data The data to pad.\n * @param {number} blockSize The multiple that the data should be padded to.\n * @example\n *   JsCrypto.pad.ISO10126.pad(wordArray, 4);\n */\nfunction pad(data: Word32Array, blockSize: number){\n  // Shortcut\n  const blockSizeBytes = blockSize * 4;\n  \n  // Count padding bytes\n  const nPaddingBytes = blockSizeBytes - data.nSigBytes % blockSizeBytes;\n  \n  // Pad\n  data\n    .concat(Word32Array.random(nPaddingBytes - 1))\n    .concat(new Word32Array([nPaddingBytes << 24], 1));\n}\n\n/**\n * Unpads data that had been padded with ISO10126 padding strategy.\n *\n * @param {Word32Array} data The data to unpad.\n * @example\n *   JsCrypto.pad.ISO10126.unpad(wordArray);\n */\nfunction unpad(data: Word32Array){\n  // Get number of padding bytes from last byte\n  const nPaddingBytes = data.words[(data.nSigBytes - 1) >>> 2] & 0xff;\n  \n  // Remove padding\n  data.nSigBytes -= nPaddingBytes;\n}\n\nexport const ISO10126: Pad = {\n  pad,\n  unpad,\n};\n","import {Word32Array} from \"../../../Word32Array\";\nimport type {Pad} from \"./type\";\nimport {Zero} from \"./Zero\";\n\n/**\n * ISO/IEC 9797-1 Padding Method 2. padding strategy\n *\n * @param {Word32Array} data The data to pad.\n * @param {number} blockSize The multiple that the data should be padded to.\n * @example\n *   JsCrypto.pad.ISO97971.pad(wordArray, 4);\n */\nfunction pad(data: Word32Array, blockSize: number){\n  // Add 0x80 byte\n  data.concat(new Word32Array([0x80000000], 1));\n  \n  // Zero pad the rest\n  Zero.pad(data, blockSize);\n}\n\n/**\n * Unpads data that had been padded with ISO/IEC 9797-1 Padding Method 2 strategy.\n *\n * @param {Word32Array} data The data to unpad.\n * @example\n *   JsCrypto.pad.ISO97971.unpad(wordArray);\n */\nfunction unpad(data: Word32Array){\n  // Remove zero padding\n  Zero.unpad(data);\n  \n  // Remove one more byte -- the 0x80 byte\n  data.nSigBytes -= 1;\n}\n\nexport const ISO97971: Pad = {\n  pad,\n  unpad,\n};\n","import type {Word32Array} from \"../../../Word32Array\";\nimport type {Pad} from \"./type\";\n\n/**\n * A noop padding strategy\n *\n * @param {Word32Array} data The data to pad.\n * @param {number} blockSize The multiple that the data should be padded to.\n * @example\n *   JsCrypto.pad.Noop.pad(wordArray, 4);\n */\nfunction pad(data: Word32Array, blockSize: number){\n  // Noop\n}\n\n/**\n * Unpads data that had been padded with Noop strategy.\n *\n * @param {Word32Array} data The data to unpad.\n * @example\n *   JsCrypto.pad.Noop.unpad(wordArray);\n */\nfunction unpad(data: Word32Array){\n  // Noop\n}\n\nexport const Noop: Pad = {\n  pad,\n  unpad,\n};\n","import {Word32Array} from \"../../../Word32Array\";\nimport type {Pad} from \"./type\";\n\n/**\n * Pads data using the algorithm defined in PKCS #5/7.\n *\n * @param {Word32Array} data The data to pad.\n * @param {number} blockSize The multiple that the data should be padded to.\n * @example\n *   JsCrypto.pad.Pkcs7.pad(wordArray, 4);\n */\nfunction pad(data: Word32Array, blockSize: number){\n  // Shortcut\n  const blockSizeBytes = blockSize * 4;\n  \n  // Count padding bytes\n  const nPaddingBytes = blockSizeBytes - data.nSigBytes % blockSizeBytes;\n  \n  // Create padding word\n  const paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n  \n  // Create padding\n  const paddingWords = [];\n  for (let i = 0; i < nPaddingBytes; i += 4) {\n    paddingWords.push(paddingWord);\n  }\n  const padding = new Word32Array(paddingWords, nPaddingBytes);\n  \n  // Add padding\n  data.concat(padding);\n}\n\n/**\n * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n *\n * @param {Word32Array} data The data to unpad.\n * @example\n *   JsCrypto.pad.Pkcs7.unpad(wordArray);\n */\nfunction unpad(data: Word32Array){\n  // Get number of padding bytes from last byte\n  const nPaddingBytes = data.words[(data.nSigBytes - 1) >>> 2] & 0xff;\n  \n  // Remove padding\n  data.nSigBytes -= nPaddingBytes;\n}\n\nexport const Pkcs7: Pad = {\n  pad,\n  unpad,\n};\n","import type {Word32Array} from \"../../../Word32Array\";\nimport type {Pad} from \"./type\";\n\n/**\n * Pads data with zero padding strategy.\n *\n * @param {Word32Array} data The data to pad.\n * @param {number} blockSize The multiple that the data should be padded to.\n * @example\n *   JsCrypto.pad.Zero.pad(wordArray, 4);\n */\nfunction pad(data: Word32Array, blockSize: number){\n  // Shortcut\n  const blockSizeBytes = blockSize * 4;\n  \n  // Pad\n  data.clamp();\n  data.nSigBytes += blockSizeBytes - ((data.nSigBytes % blockSizeBytes) || blockSizeBytes);\n}\n\n/**\n * Unpads data that had been padded with zero padding strategy.\n *\n * @param {Word32Array} data The data to unpad.\n * @example\n *   JsCrypto.pad.Zero.unpad(wordArray);\n */\nfunction unpad(data: Word32Array){\n  // Shortcut\n  const dataWords = data.words;\n  \n  // Unpad\n  for (let i=data.nSigBytes-1;i>=0;i--){\n    if((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff){\n      data.nSigBytes = i+1;\n      break;\n    }\n  }\n}\n\nexport const Zero: Pad = {\n  pad,\n  unpad,\n};\n","import type {IEncoder} from \"../type\";\nimport {Word32Array} from \"../Word32Array\";\n\nconst map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nexport const Base64: IEncoder = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {Word32Array} w An array of 32-bit words.\n   * @return {string} The hex string.\n   * @example\n   *   var hexString = Hex.stringify([0x293892], 6);\n   */\n  stringify(w: Word32Array){\n    // Shortcuts\n    const words = w.words;\n    const sigBytes = w.nSigBytes;\n  \n    // Clamp excess bits\n    w.clamp();\n  \n    // Convert\n    const base64Chars = [];\n    for (let i = 0; i < sigBytes; i += 3) {\n      const byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n      const byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n      const byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n  \n      const triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n    \n      for (let j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n        base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n      }\n    }\n  \n    // Add padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n  \n    return base64Chars.join(\"\");\n  },\n  \n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} base64Str The hex string.\n   * @return {Word32Array} The word array.\n   * @example\n   *   var wordArray = Hex.parse(hexString);\n   */\n  parse(base64Str: string){\n    const Len = base64Str.length;\n    const words: number[] = [];\n    \n    for(let i=0;i<Len;i+=2){\n      words[i >>> 3] |= parseInt(base64Str.substr(i, 2), 16) << (24 - (i % 8) * 4);\n    }\n    \n    return new Word32Array(words, Len / 2);\n  }\n}\n","import type {IEncoder} from \"../type\";\nimport {Word32Array} from \"../Word32Array\";\n\nexport const Hex: IEncoder = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {Word32Array} w An array of 32-bit words.\n   * @return {string} The hex string.\n   * @example\n   *   var hexString = Hex.stringify([0x293892], 6);\n   */\n  stringify(w: Word32Array){\n    const nSig = w.nSigBytes;\n    const words = w.words;\n    const hexChars: string[] = [];\n    \n    for(let i=0;i<nSig;i++){\n      const byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      hexChars.push((byte >>> 4).toString(16));\n      hexChars.push((byte & 0x0f).toString(16));\n    }\n    \n    return hexChars.join(\"\");\n  },\n  \n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   * @return {Word32Array} The word array.\n   * @example\n   *   var wordArray = Hex.parse(hexString);\n   */\n  parse(hexStr: string){\n    const Len = hexStr.length;\n    const words: number[] = [];\n    \n    for(let i=0;i<Len;i+=2){\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n    }\n    \n    return new Word32Array(words, Len / 2);\n  }\n}\n","import type {IEncoder} from \"../type\";\nimport {Word32Array} from \"../Word32Array\";\n\nexport const Latin1: IEncoder = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {Word32Array} w An array of 32-bit words.\n   * @return {string} The Latin1 string.\n   * @example\n   *   var latin1String = Latin1.stringify([0x293892], 6);\n   */\n  stringify(w: Word32Array){\n    const nSig = w.nSigBytes;\n    const words = w.words;\n    const latin1Chars: string[] = [];\n    \n    for(let i=0;i<nSig;i++){\n      const byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      latin1Chars.push(String.fromCharCode(byte));\n    }\n    \n    return latin1Chars.join(\"\");\n  },\n  \n  /**\n   * Converts a latin1 string to a word array.\n   *\n   * @param {string} latin1Str The latin1 string.\n   * @return {Word32Array} The word array.\n   * @example\n   *   var wordArray = Latin1.parse(latin1Str);\n   */\n  parse(latin1Str: string){\n    const Len = latin1Str.length;\n    const words: number[] = [];\n    \n    for(let i=0;i<Len;i++){\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n    }\n    \n    return new Word32Array(words, Len);\n  }\n}\n","import type {IEncoder} from \"../type\";\nimport {Latin1} from \"./Latin1\";\nimport type {Word32Array} from \"../Word32Array\";\n\nexport const Utf8: IEncoder = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {Word32Array} w An array of 32-bit words.\n   * @return {string} The UTF-8 string.\n   * @example\n   *   var utf8String = Utf8.stringify(new Word32Array([0x293892]));\n   */\n  stringify(w: Word32Array){\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(w)));\n    }\n    catch (e) {\n      throw new Error(\"Malformed UTF-8 data\");\n    }\n  },\n  \n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   * @return {Word32Array} The word array.\n   * @example\n   *   var wordArray = Utf8.parse(utf8Str);\n   */\n  parse(utf8Str: string){\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n}\n","interface WindowEx extends Window {\n  /**\n   * Native (experimental IE 11) crypto from window (Browser)\n   */\n  msCrypto?: Crypto;\n}\n\n/**\n * @ignore\n */\ndeclare let window: WindowEx;\ntype NodeCrypto = { randomBytes: (size: number) => { readInt32LE: () => number } };\n\nfunction makeRandFunction(): () => number {\n  if (typeof window !== \"undefined\") {\n    const c = window.crypto || window.msCrypto;\n    if (!c) {\n      throw new Error(\"Crypto module not found\");\n    }\n    return function rand(){\n      return (c as Crypto).getRandomValues(new Uint32Array(1))[0];\n    };\n  }\n  else if (typeof global !== \"undefined\" && global.crypto) {\n    return function rand(){\n      return ((global.crypto as unknown) as NodeCrypto).randomBytes(4).readInt32LE();\n    };\n  }\n  else if(typeof require === \"function\"){\n    return function rand(){\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return (__non_webpack_require__(\"crypto\") as NodeCrypto).randomBytes(4).readInt32LE();\n    }\n  }\n  throw new Error(\"Unable to find crypto module\");\n}\n\nexport const random = makeRandFunction();\n","export {CBC} from \"../lib/algorithm/cipher/mode/CBC\";\n","export {CFB} from \"../lib/algorithm/cipher/mode/CFB\";\n","export {CTR} from \"../lib/algorithm/cipher/mode/CTR\";\n","export {ECB} from \"../lib/algorithm/cipher/mode/ECB\";\n","export {OFB} from \"../lib/algorithm/cipher/mode/OFB\";\n","export {AnsiX923} from \"../lib/algorithm/cipher/pad/AnsiX923\";\n","export {ISO10126} from \"../lib/algorithm/cipher/pad/ISO10126\";\n","export {ISO97971} from \"../lib/algorithm/cipher/pad/ISO97971\";\n","export {Noop} from \"../lib/algorithm/cipher/pad/Noop\";\n","export {Zero} from \"../lib/algorithm/cipher/pad/Zero\";\n"],"sourceRoot":""}